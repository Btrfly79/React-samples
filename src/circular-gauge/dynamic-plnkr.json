{"index.css":"","dynamic-service":"/**\r\n * Dynamic source\r\n */\r\n\r\nimport { CircularGauge } from '@syncfusion/ej2-circulargauge';\r\nimport { Annotations, IAxisLabelRenderEventArgs } from '@syncfusion/ej2-circulargauge';\r\nCircularGauge.Inject(Annotations);\r\n\r\nexport class DynamicDataSerive {\r\n    GetSubGauge1(): any {\r\n        let gauge1: CircularGauge = new CircularGauge({\r\n            axes: [\r\n                {\r\n                    lineStyle: {\r\n                        width: 0,\r\n                        color: '#565656'\r\n                    },\r\n                    labelStyle: {\r\n                        useRangeColor: true\r\n                    },\r\n                    minimum: 0,\r\n                    maximum: 6,\r\n                    ranges: [{\r\n                        start: 0,\r\n                        end: 5,\r\n                        color: '#1d1d1d',\r\n                        startWidth: 0, endWidth: 0\r\n                    }, {\r\n                        start: 5,\r\n                        end: 6,\r\n                        color: '#c20000',\r\n                        startWidth: 0, endWidth: 0\r\n                    }],\r\n                    pointers: [{\r\n                        color: '#FF7A00',\r\n                        cap: { radius: 5, color: 'white', border: { color: '#FF7A00', width: 2 } },\r\n                        radius: '60%',\r\n                        pointerWidth: 5,\r\n                        value: 1,\r\n                        animation: { duration: 0 }\r\n                    }]\r\n                }, {\r\n                    lineStyle: {\r\n                        color: '#565656'\r\n                    },\r\n                    radius: '90%',\r\n                    pointers: [],\r\n                    labelStyle: { font: { size: '0px' } },\r\n                    majorTicks: {\r\n                        height: 0\r\n                    }, minorTicks: {\r\n                        height: 0\r\n                    }, startAngle: 155, endAngle: 25\r\n                }\r\n            ]\r\n        });\r\n        let gauge2: CircularGauge = new CircularGauge({\r\n            axes: [\r\n                {\r\n                    lineStyle: {\r\n                        width: 0\r\n                    },\r\n                    labelStyle: {\r\n                        useRangeColor: true\r\n                    },\r\n                    minimum: 70,\r\n                    maximum: 110,\r\n                    ranges: [{\r\n                        start: 70,\r\n                        end: 70,\r\n                        color: '#1d1d1d',\r\n                        startWidth: 0, endWidth: 0\r\n                    }, {\r\n                        start: 71,\r\n                        end: 109,\r\n                        color: '#ff7a00',\r\n                        startWidth: 0, endWidth: 0\r\n                    }, {\r\n                        start: 110,\r\n                        end: 110,\r\n                        color: '#c20000',\r\n                        startWidth: 0, endWidth: 0\r\n                    }],\r\n                    pointers: [{\r\n                        color: '#757575',\r\n                        type: 'Marker',\r\n                        cap: { radius: 5, color: 'white', border: { color: '#ff7a00', width: 2 } },\r\n                        markerShape: 'Triangle',\r\n                        markerWidth: 10,\r\n                        markerHeight: 10,\r\n                        radius: '90%',\r\n                        pointerWidth: 5,\r\n                        value: 90,\r\n                        animation: { duration: 500 }\r\n                    }]\r\n                }\r\n            ],\r\n            axisLabelRender: (args: IAxisLabelRenderEventArgs) => {\r\n                args.text = args.value === 70 ? 'F' : 'E';\r\n            }\r\n        });\r\n        let gauge3: CircularGauge = new CircularGauge({\r\n            axes: [\r\n                {\r\n                    lineStyle: {\r\n                        width: 0\r\n                    },\r\n\r\n                    labelStyle: {\r\n                        useRangeColor: true\r\n                    },\r\n                    minimum: 70,\r\n                    maximum: 110,\r\n                    ranges: [{\r\n                        start: 70,\r\n                        end: 70,\r\n                        color: '#1d1d1d',\r\n                        startWidth: 0, endWidth: 0\r\n                    }, {\r\n                        start: 71,\r\n                        end: 109,\r\n                        color: '#ff7a00',\r\n                        startWidth: 0, endWidth: 0\r\n                    }, {\r\n                        start: 110,\r\n                        end: 110,\r\n                        color: '#c20000',\r\n                        startWidth: 0, endWidth: 0\r\n                    }],\r\n                    pointers: [{\r\n                        color: '#757575',\r\n                        type: 'Marker',\r\n                        cap: { radius: 5, color: 'white', border: { color: '#ff7a00', width: 2 } },\r\n                        markerShape: 'Triangle',\r\n                        markerWidth: 10,\r\n                        markerHeight: 10,\r\n                        radius: '90%',\r\n                        pointerWidth: 5,\r\n                        value: 90,\r\n                        animation: { duration: 500 }\r\n                    }]\r\n                }, {\r\n                    lineStyle: {\r\n                        color: '#565656'\r\n                    },\r\n                    radius: '90%',\r\n                    pointers: [],\r\n                    labelStyle: { font: { size: '0px' } },\r\n                    majorTicks: {\r\n                        height: 0\r\n                    }, minorTicks: {\r\n                        height: 0\r\n                    }, startAngle: 330, endAngle: 210\r\n\r\n                }\r\n            ]\r\n        });\r\n        return { 'gauge1': gauge1, 'gauge2': gauge2, 'gauge3': gauge3 };\r\n    }\r\n}","systemjs.config.js":"System.config({\r\n    transpiler: \"ts\",\r\n    typescriptOptions: {\r\n            target: \"es5\",\r\n            module: \"commonjs\",\r\n            moduleResolution: \"node\",\r\n            emitDecoratorMetadata: true,\r\n            experimentalDecorators: true,\r\n            \"jsx\": \"react\"\r\n    },\r\n     meta: {\r\n      'typescript': {\r\n        \"exports\": \"ts\"\r\n      },\r\n      '*.json': { loader: 'plugin-json' }\r\n    },\r\n    paths: {\r\n        \"syncfusion:\": \"http://cdn.syncfusion.com/ej2/\"},\r\n    map: {\r\n        app: 'app',\r\n        ts: \"https://unpkg.com/plugin-typescript@4.0.10/lib/plugin.js\",\r\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\r\n        \"plugin-json\":\"https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js\",\r\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\r\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\r\n        \"@syncfusion/ej2-splitbuttons\": \"syncfusion:ej2-splitbuttons/dist/ej2-splitbuttons.umd.min.js\",\r\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\r\n        \"@syncfusion/ej2-maps\": \"syncfusion:ej2-maps/dist/ej2-maps.umd.min.js\",\r\n        \"@syncfusion/ej2-treemap\": \"syncfusion:ej2-treemap/dist/ej2-treemap.umd.min.js\",\r\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\r\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\r\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\r\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",\r\n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\r\n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",\r\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",\r\n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\r\n        \"@syncfusion/ej2-schedule\": \"syncfusion:ej2-schedule/dist/ej2-schedule.umd.min.js\",\r\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",        \r\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\r\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",        \r\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\",\r\n        \"@syncfusion/ej2-documenteditor\": \"syncfusion:ej2-documenteditor/dist/ej2-documenteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-notifications\": \"syncfusion:ej2-notifications/dist/ej2-notifications.umd.min.js\",\r\n        \"@syncfusion/ej2-richtexteditor\": \"syncfusion:ej2-richtexteditor/dist/ej2-richtexteditor.umd.min.js\",\r\n\t\t\"@syncfusion/ej2-svg-base\": \"syncfusion:ej2-svg-base/dist/ej2-svg-base.umd.min.js\",\r\n        \"@syncfusion/ej2-pivotview\": \"syncfusion:ej2-pivotview/dist/ej2-pivotview.umd.min.js\",\r\n        \"@syncfusion/ej2-heatmap\": \"syncfusion:ej2-heatmap/dist/ej2-heatmap.umd.min.js\",\r\n        \"@syncfusion/ej2-react-base\": \"syncfusion:ej2-react-base/dist/ej2-react-base.umd.min.js\",\r\n        \"@syncfusion/ej2-react-buttons\": \"syncfusion:ej2-react-buttons/dist/ej2-react-buttons.umd.min.js\",\r\n        \"@syncfusion/ej2-react-splitbuttons\": \"syncfusion:ej2-react-splitbuttons/dist/ej2-react-splitbuttons.umd.min.js\",\r\n        \"@syncfusion/ej2-react-charts\": \"syncfusion:ej2-react-charts/dist/ej2-react-charts.umd.min.js\",\r\n        \"@syncfusion/ej2-react-maps\": \"syncfusion:ej2-react-maps/dist/ej2-react-maps.umd.min.js\",\r\n        \"@syncfusion/ej2-react-treemap\": \"syncfusion:ej2-react-treemap/dist/ej2-react-treemap.umd.min.js\",\r\n        \"@syncfusion/ej2-react-circulargauge\": \"syncfusion:ej2-react-circulargauge/dist/ej2-react-circulargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-react-lineargauge\": \"syncfusion:ej2-react-lineargauge/dist/ej2-react-lineargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-react-calendars\": \"syncfusion:ej2-react-calendars/dist/ej2-react-calendars.umd.min.js\",\r\n        \"@syncfusion/ej2-react-dropdowns\": \"syncfusion:ej2-react-dropdowns/dist/ej2-react-dropdowns.umd.min.js\",\r\n        \"@syncfusion/ej2-react-grids\": \"syncfusion:ej2-react-grids/dist/ej2-react-grids.umd.min.js\",\r\n        \"@syncfusion/ej2-react-inputs\": \"syncfusion:ej2-react-inputs/dist/ej2-react-inputs.umd.min.js\",\r\n        \"@syncfusion/ej2-react-lists\": \"syncfusion:ej2-react-lists/dist/ej2-react-lists.umd.min.js\",\r\n        \"@syncfusion/ej2-react-navigations\": \"syncfusion:ej2-react-navigations/dist/ej2-react-navigations.umd.min.js\",\r\n        \"@syncfusion/ej2-react-popups\": \"syncfusion:ej2-react-popups/dist/ej2-react-popups.umd.min.js\",\r\n        \"@syncfusion/ej2-react-schedule\": \"syncfusion:ej2-react-schedule/dist/ej2-react-schedule.umd.min.js\",\r\n        \"@syncfusion/ej2-react-documenteditor\": \"syncfusion:ej2-react-documenteditor/dist/ej2-react-documenteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-react-notifications\": \"syncfusion:ej2-react-notifications/dist/ej2-react-notifications.umd.min.js\",\r\n        \"@syncfusion/ej2-react-richtexteditor\": \"syncfusion:ej2-react-richtexteditor/dist/ej2-react-richtexteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-react-pivotview\": \"syncfusion:ej2-react-pivotview/dist/ej2-react-pivotview.umd.min.js\",\r\n        \"@syncfusion/ej2-react-heatmap\": \"syncfusion:ej2-react-heatmap/dist/ej2-react-heatmap.umd.min.js\",\r\n        \"react-dom\":\"https://unpkg.com/react-dom@15.5.4/dist/react-dom.min.js\",\r\n        \"react\":\"https://unpkg.com/react@15.5.4/dist/react.min.js\",\r\n    },\r\n    packages: {\r\n        'app': { main: 'index', defaultExtension: 'tsx' },\r\n    }\r\n});\r\n\r\nSystem.import('app');","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Circular-gauge · Dynamic · Essential JS 2 for React · Syncfusion</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <!-- {{:meta}} -->\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <script type=\"text/javascript\">\r\n        var themeName = location.hash || 'material';\r\n        themeName = themeName.replace('#','');\r\n        window.ripple = (themeName === \"material\")\r\n        document.write('<link href=\"http://cdn.syncfusion.com/ej2/' + themeName + '.css\" rel=\"stylesheet\">');\r\n    </script>\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\r\n    <script src=\"systemjs.config.js\"></script>\r\n    <link href=\"index.css\" rel=\"stylesheet\" />\r\n     <style>\r\n        #loader {\r\n            color: #008cff;\r\n            height: 40px;\r\n            left: 45%;\r\n            position: absolute;\r\n            top: 45%;\r\n            width: 30%;\r\n        }\r\n        body {\r\n            touch-action:none;\r\n        }\r\n        .body {\r\n            font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n        }\r\n\r\n        .e-view {\r\n            bottom: 0;\r\n            left: 0;\r\n            overflow: hidden;\r\n            position: absolute;\r\n            right: 0;\r\n            top: 0;\r\n        }\r\n\r\n        .sb-left {\r\n            float: left;\r\n        }\r\n\r\n        .sb-right {\r\n            float: right;\r\n        }\r\n\r\n        .sb-block {\r\n            display: block;\r\n        }\r\n\r\n        .sb-table {\r\n            display: table;\r\n        }\r\n\r\n        .sb-table-cell {\r\n            display: table-cell;\r\n            vertical-align: middle;\r\n        }\r\n\r\n        /*sample header*/\r\n\r\n\r\n        .sb-header {\r\n            height: 48px;\r\n            background: #FFFFFF;\r\n            box-shadow: 0 2px 4px 0 rgba(0,0,0,0.12);\r\n            z-index: 1001;\r\n            opacity: 100;\r\n        }\r\n\r\n\r\n        .sb-header-left, .sb-header-right {\r\n            height: 100%;\r\n        }\r\n\r\n        #sb-header-text {\r\n            padding-left: 22px;\r\n            opacity: 0.87;\r\n            font-family: Roboto;\r\n            font-weight: 500;\r\n            font-size: 15px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n        .header-logo {\r\n            float: left;\r\n            padding-left: 8px;\r\n            padding-right: 22px;\r\n        }\r\n\r\n        .footer-logo {\r\n            background: url(https://ej2.syncfusion.com/home/images/footer-logo.svg) no-repeat right;\r\n            height: 40px;\r\n            width: 140px;\r\n        }\r\n\r\n        .sb-header-splitter {\r\n            float: left;\r\n            border-left: 1px solid rgb(196, 196, 196);\r\n            height: 32px;\r\n            margin-top: 8px;\r\n            padding-left: 22 px;\r\n        }\r\n\r\n        .sb-header-settings {\r\n            display: none;\r\n        }\r\n\r\n        .product-style a{\r\n        padding-right: 15px;\r\n        font-family:Roboto;\r\n        font-weight: 500;\r\n        font-size: 13px;\r\n        color: #363636;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        }\r\n        .product-style a:hover {\r\n            color:#3C78EF;\r\n        }\r\n\r\n        .sb-download-btn a {\r\n            text-decoration: none;\r\n        }\r\n\r\n        .sb-download-text {\r\n            color: #FFFFFF;\r\n        }\r\n\r\n        .sb-download-wrapper {\r\n            padding-right: 27px;\r\n        }\r\n\r\n        .sb-download-btn:hover .sb-download-btn:focus .sb-download-btn.active {\r\n            border-radius: 2px;\r\n            font-family: \"Roboto\";\r\n            font-weight: bold;\r\n            color: #FFFFFF;\r\n        }\r\n\r\n        .sb-download-btn:hover {\r\n            background: #006CE6;\r\n        }\r\n\r\n        .sb-download-btn:focus {\r\n            background: #0051CB;\r\n        }\r\n\r\n        .sb-download-btn.active {\r\n            background: #0036B1;\r\n        }\r\n\r\n        .sb-download-btn {\r\n            background-color: #3C78EF;\r\n            opacity: 100;\r\n            border-radius: 2px;\r\n            font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n            font-weight: 500;\r\n            line-height: 18px;\r\n            height: 32px;\r\n            border-color: transparent;\r\n        }\r\n\r\n        .sb-bread-crumb {\r\n            padding-left: 20px;\r\n            padding-top: 24px;\r\n            padding-bottom: 10px;\r\n        }\r\n\r\n        .category-allcontrols a, .category-text a, .crumb-sample {\r\n            display: table;\r\n            opacity: 0.87;\r\n            font-family: Roboto;\r\n            font-weight: 500;\r\n            font-size: 15px;\r\n            color: #3C78EF;\r\n            text-align: left;\r\n            text-decoration: none;\r\n        }\r\n\r\n        .sb-bread-crumb .sb-bread-crumb-text>div {\r\n            font-size: 15px;\r\n            font-weight: 500;\r\n            padding-right: 8px;\r\n            cursor: default;\r\n            display: table-cell;\r\n        }\r\n\r\n        .sb-bread-crumb-text>div.seperator {\r\n            font-weight: 700;\r\n            font-size: 15px;\r\n            vertical-align: bottom;\r\n        } \r\n\r\n        .content {\r\n        overflow: auto;\r\n        height: calc(100% - 50px);\r\n        top: 50px;\r\n        }\r\n\r\n\r\n        .sample-content {\r\n            top: 48px;\r\n            background: #FFFFFF;\r\n        }\r\n\r\n        .div {\r\n        display: block;\r\n        }\r\n\r\n        .control-section {\r\n            padding-left: 4px;\r\n        }\r\n\r\n        .crumb-sample {\r\n            color: #000000;\r\n            line-height: 18px;\r\n        }\r\n\r\n        #description {\r\n            padding-bottom: 16px;\r\n            padding-left: 20px;\r\n            opacity: 0.75;\r\n            font-family: Roboto;\r\n            font-size: 13px;\r\n            color: #000000;\r\n            text-align: left;\r\n            padding-top: 14px;\r\n        }\r\n\r\n        #action-description {\r\n            padding-left: 20px;\r\n            padding-bottom: 15px;\r\n            opacity: 0.75;\r\n            font-family: Roboto;\r\n            font-size: 13px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n        #description-section {\r\n            padding-left: 20px;\r\n            padding-top: 30px;\r\n            opacity: 0.87;\r\n            font-family:Roboto;\r\n            font-weight: 700;\r\n            font-size: 15px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n\r\n\r\n    </style>\r\n</head>\r\n\r\n<body class='e-view ej2-new' aria-busy=\"true\">\r\n        <div class=\"sample-browser\">\r\n            <div id='sample-header' class=\"sb-header\" role=\"banner\">\r\n                <div class='sb-header-left sb-left sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"header-logo\">\r\n                            <a href=\"https://ej2.syncfusion.com/home/react.html\" target=\"\" rel=\"noopener noreferrer\">\r\n                                <div class=\"footer-logo\"> </div>\r\n                            </a>\r\n                        </div>\r\n    \r\n                    </div>\r\n                    <div class=\"sb-header-splitter sb-download-splitter\"></div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div id='sb-header-text' class='e-sb-header-text'>\r\n    \r\n                            <span class='sb-header-text-left'>Essential JS 2 for React</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class='sb-header-right sb-right sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class='product-style'>\r\n                            <div><a href=\"https://www.syncfusion.com/products/react/circular-gauge\">PRODUCT DETAILS</a></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"sb-header-item sb-table-cell sb-download-wrapper\">\r\n                            <a href=\"https://www.syncfusion.com/downloads/essential-js2\" target=\"_blank\">\r\n                                <button id=\"download-now\" class=\"sb-download-btn\">\r\n                                    <span class=\"sb-download-text\">DOWNLOAD</span>\r\n                                </button>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    \r\n            </div>\r\n            <div class ='content e-view'>\r\n            <div class='sample-content'>\r\n                <div id=\"sample-bread-crumb\" class=\"sb-bread-crumb\">\r\n                    <div class=\"sb-bread-crumb-text\">\r\n                        <div class=\"category-allcontrols\"><a href=\"https://ej2.syncfusion.com/react/demos\"><span>All Controls</span></a></div>\r\n                        <div class=\"category-seperator sb-icons\"> / </div>\r\n                        <div class=\"category-text bread-ctext\"><a href=\"https://ej2.syncfusion.com/react/demos/#/material/circular-gauge/default.html\"><span>Circular-gauge</span></a></div>\r\n                        <div class=\"category-seperator sb-icons\"> / </div>\r\n                        <div class=\"crumb-sample\">Dynamic</div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"control-content\">\r\n                <div id=\"action-description\">\r\n                        <p>\r\n                            null\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"container-fluid\">\r\n                        <div class=\"control-section\">\r\n                            <div id='sample'>\r\n                                <div id='loader'>Loading....</div>\r\n                            </div>\r\n                    \r\n                        </div>\r\n                    </div>\r\n                    <div id=\"description-section\">Description</div>    \r\n                    <div id=\"description\">\r\n                        <p>\r\n                           \n                    <p>\n                        Pointer values in the gauge can be updated dynamically using <code>setPointerValue</code> method. In this example\n                        a speedometer is depicted with speed and fuel changes has been updated dynamically.\n                    </p>\n                    <p>\n                        More information on the gauge can be found in this\n                        <a target=\"_blank\" href=\"http://ej2.syncfusion.com/documentation\"> documentation section</a>.\n                    </p>\n                \r\n                         </p>     \r\n                    </div>    \r\n                </div>             \r\n            </div>\r\n                \r\n            </div>\r\n        </div>\r\n          \r\n</body>\r\n</html>\r\n","app/index.tsx":"/**\r\n * Dynamic gauge\r\n */\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport {\r\n    CircularGaugeComponent, GaugeTheme, AxesDirective, AxisDirective, Inject, Annotations, AnnotationDirective,\r\n    PointersDirective, PointerDirective, RangesDirective, RangeDirective, AnnotationsDirective\r\n} from '@syncfusion/ej2-react-circulargauge';\r\nimport { ILoadedEventArgs, IResizeEventArgs, CircularGauge, PointerModel, AnnotationModel } from '@syncfusion/ej2-circulargauge';\r\nimport { DynamicDataSerive } from '../dynamic-service';\r\nimport { SampleBase } from './sample-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }`;\r\n    \r\nexport class Dynamic extends SampleBase<{}, {}> {\r\n    public circularGauge1: CircularGaugeComponent;\r\n    public circularGauge2: CircularGauge;\r\n    public circularGauge3: CircularGauge;\r\n    public circularGauge4: CircularGauge;\r\n    public tooltipInterval1: number;\r\n    public GEARS: number[] = [0.14, 0.06, 0.035, 0.027, 0.019];\r\n    public speed: number = 0;\r\n    public skip: number = 0;\r\n    public gear: number = 0;\r\n    public count: number = 0;\r\n    public start: boolean = true;\r\n    public gauge1StartAngle: number = 200;\r\n    public gauge1EndAngle: number = 365;\r\n    public gauge2StartAngle: number = 110;\r\n    public gauge2EndAngle: number = 180;\r\n    public gauge3StartAngle: number = 0;\r\n    public gauge3EndAngle: number = 70;\r\n    public gauge1Interval: number = 1;\r\n    public gauge1FontSize: string = '14px';\r\n    public gauge1Radius: string = '95%';\r\n    public subGauge1Radius: string = '95%';\r\n    public subGauge2Radius: string = '75%';\r\n    public tickWidth: number = 3;\r\n    public annotationContent: string = '<div><span>RPM <br/>X 1000</span></div>';\r\n    public annotationRadius: string = '40%';\r\n    public annotationAngle: number = 200;\r\n    public centerX: string = '47%';\r\n    public centerY: string = '50%';\r\n    public fuelRadius: string = '40%';\r\n    public gauge1LineWidth: number = 10;\r\n    public cloudAngle: number = 10;\r\n    public tickHeight: number = 10;\r\n    public gaugeLineStyle: Object = { width: 0 };\r\n    public load(args: ILoadedEventArgs): void {\r\n        let selectedTheme: string = location.hash.split('/')[1];\r\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n        args.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)) as GaugeTheme;\r\n    }\r\n    public gaugeLabelStyle: Object = {\r\n        position: 'Inside', format: '####', font: { size: '14px', color: '#565656' }\r\n    };\r\n    public gaugeMajorTicks: Object = {\r\n        width: 3, height: 15, color: '#565656', interval: 20\r\n    };\r\n    public gaugeMinorTicks: Object = {\r\n        width: 2, height: 10, color: '#565656'\r\n    };\r\n    public gaugePointers: Object = [{\r\n        value: 0, radius: '65%',\r\n        pointerWidth: 8,\r\n        cap: { color: '#FF9200', radius: 9, border: { width: 0, color: '#FF7A00' } },\r\n        needleTail: { length: '20%', color: '#FF9200' },\r\n        color: '#FF9200',\r\n        animation: {\r\n            enable: true\r\n        }\r\n    }];\r\n    public gaugeLineStyle1: Object = { width: 10, color: '#565656' };\r\n    public gaugeLabelStyle1: Object = {\r\n        font: { size: '0px' }\r\n    };\r\n    public gaugeMajorTicks1: Object = {\r\n        height: 0\r\n    };\r\n    public gaugeMinorTicks1: Object = {\r\n        height: 0\r\n    };\r\n    public gaugePointers1: Object = [];\r\n    public gaugeAnnotations1: Object = [{\r\n        zIndex: '1', angle: 270, radius: '100%'\r\n    }, {\r\n        zIndex: '1', angle: 90, radius: '110%'\r\n    }, {\r\n        zIndex: '1', angle: 90, radius: '110%'\r\n    }, {\r\n        zIndex: '1', angle: 180, radius: '40%', content: '0 KM/H'\r\n    }];\r\n\r\n    public gaugeLoad(args: ILoadedEventArgs): void {\r\n        let selectedTheme: string = location.hash.split('/')[1];\r\n        selectedTheme = selectedTheme ? selectedTheme : 'Material';\r\n        args.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)) as GaugeTheme;\r\n        let width: number = args.gauge.element.offsetWidth;\r\n        let height: number = args.gauge.element.offsetHeight;\r\n        if (width < 700) {\r\n            this.gauge1StartAngle = 310; this.gauge1EndAngle = 50;\r\n            this.gauge2StartAngle = 10; this.gauge2EndAngle = 90;\r\n            this.gauge3StartAngle = 270; this.gauge3EndAngle = 350;\r\n            this.gauge1Interval = 2; this.gauge1FontSize = '10px';\r\n            this.gauge1Radius = '70%'; this.subGauge1Radius = '85%';\r\n            this.subGauge2Radius = '65%'; this.centerX = '50%';\r\n            this.centerY = '30%'; this.cloudAngle = 300;\r\n            this.annotationContent = '<div style=\"font-size: 8px;\"><span>RPM X 1000</span></div>';\r\n            this.annotationAngle = 180; this.fuelRadius = '-25%'; this.annotationRadius = '10';\r\n            this.tickWidth = 2; this.tickHeight = 8; this.gauge1LineWidth = 0;\r\n            args.gauge.axes[1].annotations[0].radius = '110%'; args.gauge.axes[1].annotations[0].angle = 180;\r\n            args.gauge.axes[1].annotations[1].radius = '20%'; args.gauge.axes[1].annotations[1].angle = 40;\r\n            args.gauge.axes[1].annotations[2].radius = '20%'; args.gauge.axes[1].annotations[2].angle = 320;\r\n            args.gauge.axes[1].annotations[0].content = '<div id=\"rpm\" style=\"width:' + 200 + 'px;height:' + 200 + 'px;\"></div>';\r\n            args.gauge.axes[1].annotations[1].content = '<div id=\"fuel\" style=\"width:' + 200 + 'px;height:' + 200 + 'px;\"></div>';\r\n            args.gauge.axes[1].annotations[2].content = '<div id=\"battery\" style=\"width:' + 200 + 'px;height:' + 200 + 'px;\"></div>';\r\n        } else {\r\n            width = width / 3;\r\n            args.gauge.axes[1].annotations[0].content =\r\n                '<div id=\"rpm\" style=\"width:' + width + 'px;height:' + width + 'px;\"></div>';\r\n            args.gauge.axes[1].annotations[1].content =\r\n                '<div id=\"fuel\" style=\"width:' + width + 'px;height:' + width + 'px;\"></div>';\r\n            args.gauge.axes[1].annotations[2].content =\r\n                '<div id=\"battery\" style=\"width:' + width + 'px;height:' + width + 'px;\"></div>';\r\n        }\r\n    };\r\n    public gaugeResize(args: IResizeEventArgs): void {\r\n        location.reload();\r\n    }\r\n\r\n    public gaugeLoaded(args: ILoadedEventArgs): void {\r\n        document.getElementById(args.gauge.element.id).setAttribute('title', '');\r\n        this.circularGauge2 = new CircularGauge(DynamicDataSerive.prototype.GetSubGauge1().gauge1);\r\n        this.circularGauge2.appendTo('#rpm');\r\n        this.circularGauge2.centerX = this.centerX;\r\n        this.circularGauge2.centerY = this.centerY;\r\n        this.circularGauge2.axes[0].annotations = [{\r\n            content: this.annotationContent,\r\n            angle: this.annotationAngle,\r\n            radius: this.annotationRadius\r\n        }];\r\n        this.circularGauge2.axes[0].startAngle = this.gauge1StartAngle;\r\n        this.circularGauge2.axes[0].endAngle = this.gauge1EndAngle;\r\n        this.circularGauge2.axes[0].labelStyle.font.size = this.gauge1FontSize;\r\n        this.circularGauge2.axes[0].majorTicks = {\r\n            width: this.tickWidth,\r\n            height: this.tickHeight,\r\n            interval: this.gauge1Interval,\r\n            useRangeColor: true\r\n        }; this.circularGauge2.axes[0].minorTicks = {\r\n            height: this.tickHeight,\r\n            width: this.tickWidth,\r\n            useRangeColor: true\r\n        };\r\n        this.circularGauge2.axes[0].radius = this.gauge1Radius;\r\n        this.circularGauge2.axes[1].lineStyle.width = this.gauge1LineWidth;\r\n        this.circularGauge2.refresh();\r\n        this.circularGauge3 = new CircularGauge(DynamicDataSerive.prototype.GetSubGauge1().gauge2);\r\n        this.circularGauge3.appendTo('#fuel');\r\n        this.circularGauge3.axes[0].startAngle = this.gauge2StartAngle;\r\n        this.circularGauge3.axes[0].endAngle = this.gauge2EndAngle;\r\n        this.circularGauge3.axes[0].majorTicks = {\r\n            width: this.tickWidth,\r\n            height: this.tickHeight,\r\n            interval: 40,\r\n            useRangeColor: true\r\n        }; this.circularGauge3.axes[0].minorTicks = {\r\n            height: this.tickHeight,\r\n            width: this.tickWidth,\r\n            useRangeColor: true,\r\n            interval: 5\r\n        };\r\n        this.circularGauge3.axes[0].radius = this.subGauge2Radius;\r\n        this.circularGauge3.axes[0].annotations = [{\r\n            radius: this.fuelRadius,\r\n            content: '<div id=\"templateWrap\"><img src=\"http://ej2.syncfusion.com/react/demos/src/circulargauge/images/fuel.png\"></div>',\r\n            angle: 180\r\n        }];\r\n        this.circularGauge3.refresh();\r\n        this.circularGauge4 = new CircularGauge(DynamicDataSerive.prototype.GetSubGauge1().gauge3);\r\n        this.circularGauge4.appendTo('#battery');\r\n        this.circularGauge4.axes[0].startAngle = this.gauge3StartAngle;\r\n        this.circularGauge4.axes[0].endAngle = this.gauge3EndAngle;\r\n        this.circularGauge4.axes[0].majorTicks = {\r\n            width: this.tickWidth,\r\n            height: this.tickHeight,\r\n            interval: 40,\r\n            useRangeColor: true\r\n        }; this.circularGauge4.axes[0].minorTicks = {\r\n            height: this.tickHeight,\r\n            width: this.tickWidth,\r\n            useRangeColor: true,\r\n            interval: 5\r\n        }; this.circularGauge4.axes[0].radius = this.subGauge1Radius;\r\n        this.circularGauge4.axes[0].annotations = [{\r\n            radius: '50%',\r\n            content: '<div id=\"templateWrap\"><img src=\"http://ej2.syncfusion.com/react/demos/src/circulargauge/images/battery.png\"></div>',\r\n            angle: this.cloudAngle\r\n        }];\r\n        this.circularGauge4.axes[1].lineStyle.width = this.gauge1LineWidth;\r\n        this.circularGauge4.refresh();\r\n        this.tooltipInterval1 = setInterval(\r\n            (): void => {\r\n                if (document.getElementById('dynamic-container')) {\r\n                    if (this.speed < 200 && this.start) {\r\n                        this.count = 0;\r\n                        this.circularGauge1.axes[0].pointers[0].animation.duration = 30;\r\n                        this.circularGauge2.axes[0].pointers[0].animation.duration = 30;\r\n                        if (this.GEARS[this.gear] * this.speed > 4 && this.gear < this.GEARS.length) {\r\n                            this.gear++;\r\n                            this.skip = 400 / 50;\r\n                        }\r\n                        if (this.skip-- < 0) {\r\n                            this.speed += 0.6 - (0.0017 * this.speed);\r\n                        }\r\n                        this.circularGauge1.setPointerValue(0, 0, this.speed);\r\n                        this.circularGauge1.setAnnotationValue(1, 3, Math.round(this.speed) + ' KM/H');\r\n                        this.circularGauge2.setPointerValue(0, 0, this.GEARS[this.gear] * this.speed + 0.9);\r\n                    } else {\r\n                        this.count = this.count + 1;\r\n                        if (this.start) {\r\n                            if (this.count < 200) {\r\n                                this.circularGauge1.setAnnotationValue(1, 3, Math.round((Math.random() * (200 - 202) + 202)) + ' KM');\r\n                                this.circularGauge1.setPointerValue(0, 0, Math.random() * (200 - 202) + 202);\r\n                            } else {\r\n                                this.speed = 0;\r\n                                this.gear = 0;\r\n                                this.circularGauge1.axes[0].pointers[0].animation.duration = 2000;\r\n                                this.circularGauge2.axes[0].pointers[0].animation.duration = 2000;\r\n                                this.circularGauge1.setPointerValue(0, 0, this.speed);\r\n                                this.circularGauge1.setAnnotationValue(1, 3, Math.round(this.speed) + ' KM/H');\r\n                                this.circularGauge2.setPointerValue(0, 0, 0);\r\n                                this.start = false;\r\n                            }\r\n                        } else {\r\n                            this.start = this.count > 350;\r\n                        }\r\n                    }\r\n                } else {\r\n                    clearInterval(this.tooltipInterval1);\r\n                }\r\n            },\r\n            50\r\n        );\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section'>\r\n                    <CircularGaugeComponent id='dynamic-container' load={this.gaugeLoad.bind(this)} loaded={this.gaugeLoaded.bind(this)} resized={this.gaugeResize.bind(this)} ref={gauge => this.circularGauge1 = gauge}>\r\n                        <Inject services={[Annotations]} />\r\n                        <AxesDirective>\r\n                            <AxisDirective\r\n                                lineStyle={this.gaugeLineStyle}\r\n                                majorTicks={this.gaugeMajorTicks}\r\n                                minorTicks={this.gaugeMinorTicks}\r\n                                labelStyle={this.gaugeLabelStyle}\r\n                                minimum={0} maximum={220}\r\n                                radius='100%' startAngle={240}\r\n                                endAngle={120} pointers={this.gaugePointers as PointerModel[]}>\r\n                            </AxisDirective>\r\n                            <AxisDirective\r\n                                lineStyle={this.gaugeLineStyle1}\r\n                                majorTicks={this.gaugeMajorTicks1}\r\n                                minorTicks={this.gaugeMinorTicks1}\r\n                                pointers={this.gaugePointers1 as PointerModel[]}\r\n                                labelStyle={this.gaugeLabelStyle1}\r\n                                annotations={this.gaugeAnnotations1 as AnnotationModel[]}\r\n                                radius='90%' startAngle={0} endAngle={0}>\r\n                            </AxisDirective>\r\n                        </AxesDirective>\r\n                    </CircularGaugeComponent>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\nReactDOM.render(<Dynamic />, document.getElementById('sample'));","app/sample-base.tsx":"import * as ReactDOM from 'react-dom';\r\nimport * as React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { enableRipple } from '@syncfusion/ej2-base';\r\n\r\nenableRipple((window as any).ripple);\r\nexport class SampleBase<P, S> extends React.PureComponent<RouteComponentProps<any> & P, S>{\r\n    public rendereComplete(): void {\r\n        /**custom render complete function */\r\n    }\r\n    componentDidMount(): void {\r\n        setTimeout(() => {\r\n            this.rendereComplete();\r\n        }\r\n        );\r\n    }\r\n}"}