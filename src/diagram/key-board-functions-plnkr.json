{"index.css":"","systemjs.config.js":"System.config({\r\n    transpiler: \"ts\",\r\n    typescriptOptions: {\r\n            target: \"es5\",\r\n            module: \"commonjs\",\r\n            moduleResolution: \"node\",\r\n            emitDecoratorMetadata: true,\r\n            experimentalDecorators: true,\r\n            \"jsx\": \"react\"\r\n    },\r\n     meta: {\r\n      'typescript': {\r\n        \"exports\": \"ts\"\r\n      },\r\n      '*.json': { loader: 'plugin-json' }\r\n    },\r\n    paths: {\r\n        \"syncfusion:\": \"http://cdn.syncfusion.com/ej2/\"},\r\n    map: {\r\n        app: 'app',\r\n        ts: \"https://unpkg.com/plugin-typescript@4.0.10/lib/plugin.js\",\r\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\r\n        \"plugin-json\":\"https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js\",\r\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\r\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\r\n        \"@syncfusion/ej2-splitbuttons\": \"syncfusion:ej2-splitbuttons/dist/ej2-splitbuttons.umd.min.js\",\r\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\r\n        \"@syncfusion/ej2-maps\": \"syncfusion:ej2-maps/dist/ej2-maps.umd.min.js\",\r\n        \"@syncfusion/ej2-treemap\": \"syncfusion:ej2-treemap/dist/ej2-treemap.umd.min.js\",\r\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\r\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\r\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\r\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",\r\n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\r\n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",\r\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",\r\n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\r\n        \"@syncfusion/ej2-schedule\": \"syncfusion:ej2-schedule/dist/ej2-schedule.umd.min.js\",\r\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",        \r\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\r\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",        \r\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\",\r\n        \"@syncfusion/ej2-documenteditor\": \"syncfusion:ej2-documenteditor/dist/ej2-documenteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-notifications\": \"syncfusion:ej2-notifications/dist/ej2-notifications.umd.min.js\",\r\n        \"@syncfusion/ej2-richtexteditor\": \"syncfusion:ej2-richtexteditor/dist/ej2-richtexteditor.umd.min.js\",\r\n\t\t\"@syncfusion/ej2-svg-base\": \"syncfusion:ej2-svg-base/dist/ej2-svg-base.umd.min.js\",\r\n        \"@syncfusion/ej2-pivotview\": \"syncfusion:ej2-pivotview/dist/ej2-pivotview.umd.min.js\",\r\n        \"@syncfusion/ej2-heatmap\": \"syncfusion:ej2-heatmap/dist/ej2-heatmap.umd.min.js\",\r\n        \"@syncfusion/ej2-react-base\": \"syncfusion:ej2-react-base/dist/ej2-react-base.umd.min.js\",\r\n        \"@syncfusion/ej2-react-buttons\": \"syncfusion:ej2-react-buttons/dist/ej2-react-buttons.umd.min.js\",\r\n        \"@syncfusion/ej2-react-splitbuttons\": \"syncfusion:ej2-react-splitbuttons/dist/ej2-react-splitbuttons.umd.min.js\",\r\n        \"@syncfusion/ej2-react-charts\": \"syncfusion:ej2-react-charts/dist/ej2-react-charts.umd.min.js\",\r\n        \"@syncfusion/ej2-react-maps\": \"syncfusion:ej2-react-maps/dist/ej2-react-maps.umd.min.js\",\r\n        \"@syncfusion/ej2-react-treemap\": \"syncfusion:ej2-react-treemap/dist/ej2-react-treemap.umd.min.js\",\r\n        \"@syncfusion/ej2-react-circulargauge\": \"syncfusion:ej2-react-circulargauge/dist/ej2-react-circulargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-react-lineargauge\": \"syncfusion:ej2-react-lineargauge/dist/ej2-react-lineargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-react-calendars\": \"syncfusion:ej2-react-calendars/dist/ej2-react-calendars.umd.min.js\",\r\n        \"@syncfusion/ej2-react-dropdowns\": \"syncfusion:ej2-react-dropdowns/dist/ej2-react-dropdowns.umd.min.js\",\r\n        \"@syncfusion/ej2-react-grids\": \"syncfusion:ej2-react-grids/dist/ej2-react-grids.umd.min.js\",\r\n        \"@syncfusion/ej2-react-inputs\": \"syncfusion:ej2-react-inputs/dist/ej2-react-inputs.umd.min.js\",\r\n        \"@syncfusion/ej2-react-lists\": \"syncfusion:ej2-react-lists/dist/ej2-react-lists.umd.min.js\",\r\n        \"@syncfusion/ej2-react-navigations\": \"syncfusion:ej2-react-navigations/dist/ej2-react-navigations.umd.min.js\",\r\n        \"@syncfusion/ej2-react-popups\": \"syncfusion:ej2-react-popups/dist/ej2-react-popups.umd.min.js\",\r\n        \"@syncfusion/ej2-react-schedule\": \"syncfusion:ej2-react-schedule/dist/ej2-react-schedule.umd.min.js\",\r\n        \"@syncfusion/ej2-react-documenteditor\": \"syncfusion:ej2-react-documenteditor/dist/ej2-react-documenteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-react-notifications\": \"syncfusion:ej2-react-notifications/dist/ej2-react-notifications.umd.min.js\",\r\n        \"@syncfusion/ej2-react-richtexteditor\": \"syncfusion:ej2-react-richtexteditor/dist/ej2-react-richtexteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-react-pivotview\": \"syncfusion:ej2-react-pivotview/dist/ej2-react-pivotview.umd.min.js\",\r\n        \"@syncfusion/ej2-react-heatmap\": \"syncfusion:ej2-react-heatmap/dist/ej2-react-heatmap.umd.min.js\",\r\n        \"react-dom\":\"https://unpkg.com/react-dom@15.5.4/dist/react-dom.min.js\",\r\n        \"react\":\"https://unpkg.com/react@15.5.4/dist/react.min.js\",\r\n    },\r\n    packages: {\r\n        'app': { main: 'index', defaultExtension: 'tsx' },\r\n    }\r\n});\r\n\r\nSystem.import('app');","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Diagram · KeyBoardInteraction · Essential JS 2 for React · Syncfusion</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <!-- {{:meta}} -->\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <script type=\"text/javascript\">\r\n        var themeName = location.hash || 'material';\r\n        themeName = themeName.replace('#','');\r\n        window.ripple = (themeName === \"material\")\r\n        document.write('<link href=\"http://cdn.syncfusion.com/ej2/' + themeName + '.css\" rel=\"stylesheet\">');\r\n    </script>\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\r\n    <script src=\"systemjs.config.js\"></script>\r\n    <link href=\"index.css\" rel=\"stylesheet\" />\r\n     <style>\r\n        #loader {\r\n            color: #008cff;\r\n            height: 40px;\r\n            left: 45%;\r\n            position: absolute;\r\n            top: 45%;\r\n            width: 30%;\r\n        }\r\n        body {\r\n            touch-action:none;\r\n        }\r\n        .body {\r\n            font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n        }\r\n\r\n        .e-view {\r\n            bottom: 0;\r\n            left: 0;\r\n            overflow: hidden;\r\n            position: absolute;\r\n            right: 0;\r\n            top: 0;\r\n        }\r\n\r\n        .sb-left {\r\n            float: left;\r\n        }\r\n\r\n        .sb-right {\r\n            float: right;\r\n        }\r\n\r\n        .sb-block {\r\n            display: block;\r\n        }\r\n\r\n        .sb-table {\r\n            display: table;\r\n        }\r\n\r\n        .sb-table-cell {\r\n            display: table-cell;\r\n            vertical-align: middle;\r\n        }\r\n\r\n        /*sample header*/\r\n\r\n\r\n        .sb-header {\r\n            height: 48px;\r\n            background: #FFFFFF;\r\n            box-shadow: 0 2px 4px 0 rgba(0,0,0,0.12);\r\n            z-index: 1001;\r\n            opacity: 100;\r\n        }\r\n\r\n\r\n        .sb-header-left, .sb-header-right {\r\n            height: 100%;\r\n        }\r\n\r\n        #sb-header-text {\r\n            padding-left: 22px;\r\n            opacity: 0.87;\r\n            font-family: Roboto;\r\n            font-weight: 500;\r\n            font-size: 15px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n        .header-logo {\r\n            float: left;\r\n            padding-left: 8px;\r\n            padding-right: 22px;\r\n        }\r\n\r\n        .footer-logo {\r\n            background: url(https://ej2.syncfusion.com/home/images/footer-logo.svg) no-repeat right;\r\n            height: 40px;\r\n            width: 140px;\r\n        }\r\n\r\n        .sb-header-splitter {\r\n            float: left;\r\n            border-left: 1px solid rgb(196, 196, 196);\r\n            height: 32px;\r\n            margin-top: 8px;\r\n            padding-left: 22 px;\r\n        }\r\n\r\n        .sb-header-settings {\r\n            display: none;\r\n        }\r\n\r\n        .product-style a{\r\n        padding-right: 15px;\r\n        font-family:Roboto;\r\n        font-weight: 500;\r\n        font-size: 13px;\r\n        color: #363636;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        }\r\n        .product-style a:hover {\r\n            color:#3C78EF;\r\n        }\r\n\r\n        .sb-download-btn a {\r\n            text-decoration: none;\r\n        }\r\n\r\n        .sb-download-text {\r\n            color: #FFFFFF;\r\n        }\r\n\r\n        .sb-download-wrapper {\r\n            padding-right: 27px;\r\n        }\r\n\r\n        .sb-download-btn:hover .sb-download-btn:focus .sb-download-btn.active {\r\n            border-radius: 2px;\r\n            font-family: \"Roboto\";\r\n            font-weight: bold;\r\n            color: #FFFFFF;\r\n        }\r\n\r\n        .sb-download-btn:hover {\r\n            background: #006CE6;\r\n        }\r\n\r\n        .sb-download-btn:focus {\r\n            background: #0051CB;\r\n        }\r\n\r\n        .sb-download-btn.active {\r\n            background: #0036B1;\r\n        }\r\n\r\n        .sb-download-btn {\r\n            background-color: #3C78EF;\r\n            opacity: 100;\r\n            border-radius: 2px;\r\n            font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n            font-weight: 500;\r\n            line-height: 18px;\r\n            height: 32px;\r\n            border-color: transparent;\r\n        }\r\n\r\n        .sb-bread-crumb {\r\n            padding-left: 20px;\r\n            padding-top: 24px;\r\n            padding-bottom: 10px;\r\n        }\r\n\r\n        .category-allcontrols a, .category-text a, .crumb-sample {\r\n            display: table;\r\n            opacity: 0.87;\r\n            font-family: Roboto;\r\n            font-weight: 500;\r\n            font-size: 15px;\r\n            color: #3C78EF;\r\n            text-align: left;\r\n            text-decoration: none;\r\n        }\r\n\r\n        .sb-bread-crumb .sb-bread-crumb-text>div {\r\n            font-size: 15px;\r\n            font-weight: 500;\r\n            padding-right: 8px;\r\n            cursor: default;\r\n            display: table-cell;\r\n        }\r\n\r\n        .sb-bread-crumb-text>div.seperator {\r\n            font-weight: 700;\r\n            font-size: 15px;\r\n            vertical-align: bottom;\r\n        } \r\n\r\n        .content {\r\n        overflow: auto;\r\n        height: calc(100% - 50px);\r\n        top: 50px;\r\n        }\r\n\r\n\r\n        .sample-content {\r\n            top: 48px;\r\n            background: #FFFFFF;\r\n        }\r\n\r\n        .div {\r\n        display: block;\r\n        }\r\n\r\n        .control-section {\r\n            padding-left: 4px;\r\n        }\r\n\r\n        .crumb-sample {\r\n            color: #000000;\r\n            line-height: 18px;\r\n        }\r\n\r\n        #description {\r\n            padding-bottom: 16px;\r\n            padding-left: 20px;\r\n            opacity: 0.75;\r\n            font-family: Roboto;\r\n            font-size: 13px;\r\n            color: #000000;\r\n            text-align: left;\r\n            padding-top: 14px;\r\n        }\r\n\r\n        #action-description {\r\n            padding-left: 20px;\r\n            padding-bottom: 15px;\r\n            opacity: 0.75;\r\n            font-family: Roboto;\r\n            font-size: 13px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n        #description-section {\r\n            padding-left: 20px;\r\n            padding-top: 30px;\r\n            opacity: 0.87;\r\n            font-family:Roboto;\r\n            font-weight: 700;\r\n            font-size: 15px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n\r\n\r\n    </style>\r\n</head>\r\n\r\n<body class='e-view ej2-new' aria-busy=\"true\">\r\n        <div class=\"sample-browser\">\r\n            <div id='sample-header' class=\"sb-header\" role=\"banner\">\r\n                <div class='sb-header-left sb-left sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"header-logo\">\r\n                            <a href=\"https://ej2.syncfusion.com/home/react.html\" target=\"\" rel=\"noopener noreferrer\">\r\n                                <div class=\"footer-logo\"> </div>\r\n                            </a>\r\n                        </div>\r\n    \r\n                    </div>\r\n                    <div class=\"sb-header-splitter sb-download-splitter\"></div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div id='sb-header-text' class='e-sb-header-text'>\r\n    \r\n                            <span class='sb-header-text-left'>Essential JS 2 for React</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class='sb-header-right sb-right sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class='product-style'>\r\n                            <div><a href=\"https://www.syncfusion.com/products/react/diagram\">PRODUCT DETAILS</a></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"sb-header-item sb-table-cell sb-download-wrapper\">\r\n                            <a href=\"https://www.syncfusion.com/downloads/essential-js2\" target=\"_blank\">\r\n                                <button id=\"download-now\" class=\"sb-download-btn\">\r\n                                    <span class=\"sb-download-text\">DOWNLOAD</span>\r\n                                </button>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    \r\n            </div>\r\n            <div class ='content e-view'>\r\n            <div class='sample-content'>\r\n                <div id=\"sample-bread-crumb\" class=\"sb-bread-crumb\">\r\n                    <div class=\"sb-bread-crumb-text\">\r\n                        <div class=\"category-allcontrols\"><a href=\"https://ej2.syncfusion.com/react/demos\"><span>All Controls</span></a></div>\r\n                        <div class=\"category-seperator sb-icons\"> / </div>\r\n                        <div class=\"category-text bread-ctext\"><a href=\"https://ej2.syncfusion.com/react/demos/#/material/diagram/default.html\"><span>Diagram</span></a></div>\r\n                        <div class=\"category-seperator sb-icons\"> / </div>\r\n                        <div class=\"crumb-sample\">KeyBoardInteraction</div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"control-content\">\r\n                <div id=\"action-description\">\r\n                        <p>\r\n                            \n          <p>\n            This sample illustrates interaction with diagram control using\n            shortcut keys. Command Manager support is used to manage keyboard\n            interactions.\n          </p>\n        \r\n                        </p>\r\n                    </div>\r\n                    <div class=\"container-fluid\">\r\n                        <div class=\"control-section\">\r\n                            <div id='sample'>\r\n                                <div id='loader'>Loading....</div>\r\n                            </div>\r\n                    \r\n                        </div>\r\n                    </div>\r\n                    <div id=\"description-section\">Description</div>    \r\n                    <div id=\"description\">\r\n                        <p>\r\n                           \n          <p>\n            This example shows how to interact with the diagram control using\n            shortcut keys. The\n            <code>commandManager</code> property can be used to map the commands\n            with key gestures. In this example, along with the built-in commands\n            a few custom commands are added and a few built-in commands (nudge)\n            are overridden. That is, when the arrow keys are pressed, selection\n            will be navigated instead of moving the selected objects. The\n            different kinds of interactions and the corresponding key gestures\n            are listed in the property panel.\n          </p>\n          <br>\n        \r\n                         </p>     \r\n                    </div>    \r\n                </div>             \r\n            </div>\r\n                \r\n            </div>\r\n        </div>\r\n          \r\n</body>\r\n</html>\r\n","app/index.tsx":"import * as ReactDOM from \"react-dom\";\r\nimport * as React from \"react\";\r\nimport {\r\n  BasicShapeModel,\r\n  Keys,\r\n  Node,\r\n  Connector,\r\n  DiagramContextMenu,\r\n  HierarchicalTree,\r\n  DataBinding,\r\n  KeyModifiers,\r\n  DiagramComponent,\r\n  CommandManagerModel,\r\n  Diagram,\r\n  NodeModel,\r\n  UndoRedo,\r\n  ConnectorModel,\r\n  Inject,\r\n  SnapConstraints\r\n} from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nimport { DataManager } from \"@syncfusion/ej2-data\";\r\nimport { Point } from \"@syncfusion/ej2-diagrams/src/diagram/primitives/point\";\r\n\r\nexport let keyBoardData: object[] = [\r\n  { id: \"A\", fill: \"#3498DB\" },\r\n  { id: \"B\", ancestor: \"A\", fill: \"#E74C3C\" },\r\n  { id: \"C\", ancestor: \"A\", fill: \"#E74C3C\" },\r\n  { id: \"D\", ancestor: \"A\", fill: \"#E74C3C\" },\r\n  { id: \"E\", ancestor: \"B\", fill: \"#F39C12\" },\r\n  { id: \"F\", ancestor: \"B\", fill: \"#F39C12\" },\r\n  { id: \"G\", ancestor: \"F\", fill: \"#8E44AD\" },\r\n  { id: \"H\", ancestor: \"F\", fill: \"#8E44AD\" },\r\n  { id: \"I\", ancestor: \"G\", fill: \"#1E8449\" },\r\n  { id: \"J\", ancestor: \"G\", fill: \"#1E8449\" }\r\n];\r\n\r\nexport interface DataInfo {\r\n  [key: string]: string;\r\n}\r\n\r\nlet node: NodeModel;\r\nlet shape: BasicShapeModel = {\r\n  type: \"Basic\",\r\n  shape: \"Ellipse\",\r\n  cornerRadius: 10\r\n};\r\nlet diagramInstance: DiagramComponent;\r\nconst SAMPLE_CSS = `.control-section {\r\n  padding-top: 0px;\r\n  padding-bottom: 0px;\r\n  padding-right: 0px;\r\n  padding-left: 0px;\r\n}\r\n\r\n.container-fluid {\r\n  padding-left: 0px;\r\n}\r\n\r\n.property-panel-content {\r\n  padding-top: 0px !important;\r\n}\r\n\r\n@media (max-width: 550px) {\r\n  .property-panel-content {\r\n      padding-top: 0px !important;\r\n  }\r\n}`;\r\n\r\nexport class KeyBoardInteraction extends SampleBase<{}, {}> {\r\n  render() {\r\n    return (\r\n      <div className=\"control-pane\">\r\n        <div className=\"col-lg-8 control-section\">\r\n          <div className=\"content-wrapper\" style={{ width: \"100%\" }}>\r\n            <DiagramComponent\r\n              ref={diagram => (diagramInstance = diagram)}\r\n              id=\"diagram\"\r\n              width={\"100%\"}\r\n              height={\"645\"}\r\n              snapSettings={{ constraints: SnapConstraints.None }}\r\n              contextMenuSettings={{ show: true }}\r\n              getNodeDefaults={this.nodeDefaults.bind(this)}\r\n              layout={{ type: \"HierarchicalTree\" }}\r\n              dataSourceSettings={{\r\n                id: \"id\",\r\n                parentId: \"ancestor\",\r\n                dataManager: new DataManager(keyBoardData as JSON[]),\r\n                doBinding: (nodeModel: NodeModel, data: DataInfo) => {\r\n                  nodeModel.annotations = [\r\n                    {\r\n                      /* tslint:disable:no-string-literal */\r\n                      content: data[\"id\"],\r\n                      style: { color: \"white\" }\r\n                    }\r\n                  ];\r\n                  nodeModel.style = {\r\n                    strokeColor:\r\n                      \"transparent\" /* tslint:disable:no-string-literal */,\r\n                    fill: data[\"fill\"]\r\n                  };\r\n                }\r\n              }}\r\n              commandManager={this.getCommandManagerSettings()}\r\n            >\r\n              <Inject\r\n                services={[\r\n                  UndoRedo,\r\n                  DiagramContextMenu,\r\n                  HierarchicalTree,\r\n                  DataBinding\r\n                ]}\r\n              />\r\n            </DiagramComponent>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-lg-4 property-section\">\r\n          <div>\r\n            <h4 className=\"property-panel-header\">Built-In Commands</h4>\r\n            <div className=\"property-panel-content\">\r\n              <table id=\"property1\" style={{ fontSize: \"12px\" }}>\r\n                <tbody>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>\r\n                      <h5>Command</h5>\r\n                    </td>\r\n                    <td style={{ width: \"40%\" }}>\r\n                      <h5>Gesture</h5>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"61%\" }}>Select All </td>\r\n                    <td style={{ width: \"39%\" }}>Ctrl + A</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>Cut</td>\r\n                    <td style={{ width: \"40%\" }}>Ctrl + X</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>Copy</td>\r\n                    <td style={{ width: \"40%\" }}>Ctrl + C</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>Paste</td>\r\n                    <td style={{ width: \"40%\" }}>Ctrl + V</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"60%;\" }}>Undo</td>\r\n                    <td style={{ width: \"40%\" }}>Ctrl + Z</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>Redo</td>\r\n                    <td style={{ width: \"40%\" }}>Ctrl + Y</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>Delete</td>\r\n                    <td style={{ width: \"40%\" }}>Delete</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <h4 className=\"property-panel-header\">Custom Commands</h4>\r\n            <div className=\"property-panel-content\">\r\n              <table id=\"property2\" style={{ fontSize: \"12px;\" }}>\r\n                <tbody>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>\r\n                      <h5>Command\r\n                       </h5>\r\n                    </td>\r\n                    <td style={{ width: \"40%\" }}>\r\n                      <h5>Gesture</h5>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>Group</td>\r\n                    <td style={{ width: \"40%\" }}>Ctrl + G</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>Ungroup</td>\r\n                    <td style={{ width: \"40%\" }}>Ctrl + U</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <h4 className=\"property-panel-header\">Modified Commands</h4>\r\n            <div className=\"property-panel-content\">\r\n              <table id=\"property3\" style={{fontSize: \"12px\"}}>\r\n                <tbody>\r\n                  <tr>\r\n                    <td style={{ width: \"70%\" }}>\r\n                      <h5>Command</h5>\r\n                    </td>\r\n                    <td style={{ width: \"30%\" }}>\r\n                      <h5>Gesture</h5>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>Navigate to Parent Node </td>\r\n                    <td style={{ width: \"40%\" }}>Up Arrow</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>Navigate to Child Node </td>\r\n                    <td style={{ width: \"40%\" }}>Down Arrow</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>Navigate to Previous Child </td>\r\n                    <td style={{ width: \"40%\" }}>Left Arrow</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td style={{ width: \"60%\" }}>Navigate to Next Child </td>\r\n                    <td style={{ width: \"40%\" }}>Right Arrow</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public nodeDefaults(obj: Node): Node {\r\n    if (!obj.children) {\r\n      obj.shape = shape;\r\n      obj.width = 70;\r\n      obj.height = 70;\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  //Custom command for Diagraming elements.\r\n  public getCommandManagerSettings(): CommandManagerModel {\r\n    let commandManager: CommandManagerModel = {\r\n      commands: [\r\n        {\r\n          name: \"customGroup\",\r\n          canExecute: (): boolean => {\r\n            if (\r\n              diagramInstance.selectedItems.nodes.length > 0 ||\r\n              diagramInstance.selectedItems.connectors.length > 0\r\n            ) {\r\n              return true;\r\n            }\r\n            return false;\r\n          },\r\n          execute: (): void => {\r\n            diagramInstance.group();\r\n          },\r\n          gesture: { key: Keys.G, keyModifiers: KeyModifiers.Control }\r\n        },\r\n        {\r\n          name: \"customUnGroup\",\r\n          canExecute: (): boolean => {\r\n            if (diagramInstance.selectedItems.nodes[0].children) {\r\n              return true;\r\n            }\r\n            return false;\r\n          },\r\n          execute: (): void => {\r\n            diagramInstance.unGroup();\r\n          },\r\n          gesture: { key: Keys.U, keyModifiers: KeyModifiers.Control }\r\n        },\r\n        {\r\n          name: \"navigationDown\",\r\n          canExecute: (): boolean => {\r\n            return true;\r\n          },\r\n          execute: (): void => {\r\n            this.navigateToChild();\r\n          },\r\n          gesture: { key: Keys.Down }\r\n        },\r\n        {\r\n          name: \"navigationUp\",\r\n          canExecute: (): boolean => {\r\n            return true;\r\n          },\r\n          execute: (): void => {\r\n            this.navigateToParent();\r\n          },\r\n          gesture: { key: Keys.Up }\r\n        },\r\n        {\r\n          name: \"navigationLeft\",\r\n          canExecute: (): boolean => {\r\n            return true;\r\n          },\r\n          execute: (): void => {\r\n            this.navigateToRighttSibling();\r\n          },\r\n          gesture: { key: Keys.Right }\r\n        },\r\n        {\r\n          name: \"navigationRight\",\r\n          canExecute: (): boolean => {\r\n            return true;\r\n          },\r\n          execute: (): void => {\r\n            this.navigateToLeftSibling();\r\n          },\r\n          gesture: { key: Keys.Left }\r\n        }\r\n      ]\r\n    };\r\n    return commandManager;\r\n  }\r\n\r\n  //Navigation for Child Node\r\n  public navigateToChild(): void {\r\n    let parent: Node = diagramInstance.selectedItems.nodes[0] as Node;\r\n    let connectorId: string = parent.outEdges[0];\r\n    let child: NodeModel[] = this.getChildNode(connectorId);\r\n    if (child) {\r\n      diagramInstance.clearSelection();\r\n      diagramInstance.select(child);\r\n    }\r\n  }\r\n\r\n  //Navigation for parent Node\r\n  public navigateToParent(): void {\r\n    let child: Node = diagramInstance.selectedItems.nodes[0] as Node;\r\n    let connectorId: string = child.inEdges[0];\r\n    let parent: NodeModel[] = this.getParentNode(connectorId);\r\n    if (parent) {\r\n      diagramInstance.clearSelection();\r\n      diagramInstance.select(parent);\r\n    }\r\n  }\r\n\r\n  //Navigation for RightSibling Node\r\n  public navigateToRighttSibling(): void {\r\n    let child: Node = diagramInstance.selectedItems.nodes[0] as Node;\r\n    let connectorId: string = child.inEdges[0];\r\n    let nextConnectorId: string;\r\n    let parent: NodeModel[] = this.getParentNode(connectorId);\r\n    for (let i: number = 0; i < (parent[0] as Node).outEdges.length; i++) {\r\n      if ((parent[0] as Node).outEdges[i] === connectorId) {\r\n        nextConnectorId = (parent[0] as Node).outEdges[i + 1];\r\n      }\r\n    }\r\n    let rightSibling: NodeModel[] = this.getChildNode(nextConnectorId);\r\n    if (rightSibling) {\r\n      diagramInstance.clearSelection();\r\n      diagramInstance.select(rightSibling);\r\n    }\r\n  }\r\n\r\n  //Navigation for LeftSibling Node\r\n  public navigateToLeftSibling(): void {\r\n    let child: Node = diagramInstance.selectedItems.nodes[0] as Node;\r\n    let connectorId: string = child.inEdges[0];\r\n    let prevConnectorId: string;\r\n    let parent: NodeModel[] = this.getParentNode(connectorId);\r\n    for (let i: number = 0; i < (parent[0] as Node).outEdges.length; i++) {\r\n      if ((parent[0] as Node).outEdges[i] === connectorId) {\r\n        prevConnectorId = (parent[0] as Node).outEdges[i - 1];\r\n      }\r\n    }\r\n    let rightSibling: NodeModel[] = this.getChildNode(prevConnectorId);\r\n    if (rightSibling) {\r\n      diagramInstance.clearSelection();\r\n      diagramInstance.select(rightSibling);\r\n    }\r\n  }\r\n\r\n  //Get child node elements\r\n  public getChildNode(name: string): NodeModel[] {\r\n    let childNode: NodeModel[] = [];\r\n    let connector: ConnectorModel = diagramInstance.getObject(\r\n      name\r\n    ) as ConnectorModel;\r\n    if (connector) {\r\n      childNode.push(diagramInstance.getObject(\r\n        connector.targetID\r\n      ) as NodeModel);\r\n    }\r\n    return childNode;\r\n  }\r\n\r\n  //Get parent node elements\r\n  public getParentNode(name: string): NodeModel[] {\r\n    let parentNode: NodeModel[] = [];\r\n    let connector: ConnectorModel = diagramInstance.getObject(\r\n      name\r\n    ) as ConnectorModel;\r\n    if (connector) {\r\n      parentNode.push(diagramInstance.getObject(\r\n        connector.sourceID\r\n      ) as NodeModel);\r\n    }\r\n    return parentNode;\r\n  }\r\n}\r\n\nReactDOM.render(<KeyBoardInteraction />, document.getElementById('sample'));","app/sample-base.tsx":"import * as ReactDOM from 'react-dom';\r\nimport * as React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { enableRipple } from '@syncfusion/ej2-base';\r\n\r\nenableRipple((window as any).ripple);\r\nexport class SampleBase<P, S> extends React.PureComponent<RouteComponentProps<any> & P, S>{\r\n    public rendereComplete(): void {\r\n        /**custom render complete function */\r\n    }\r\n    componentDidMount(): void {\r\n        setTimeout(() => {\r\n            this.rendereComplete();\r\n        }\r\n        );\r\n    }\r\n}"}