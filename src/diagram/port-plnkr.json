{"index.css":"","systemjs.config.js":"System.config({\r\n    transpiler: \"ts\",\r\n    typescriptOptions: {\r\n            target: \"es5\",\r\n            module: \"commonjs\",\r\n            moduleResolution: \"node\",\r\n            emitDecoratorMetadata: true,\r\n            experimentalDecorators: true,\r\n            \"jsx\": \"react\"\r\n    },\r\n     meta: {\r\n      'typescript': {\r\n        \"exports\": \"ts\"\r\n      },\r\n      '*.json': { loader: 'plugin-json' }\r\n    },\r\n    paths: {\r\n        \"syncfusion:\": \"http://cdn.syncfusion.com/ej2/\"},\r\n    map: {\r\n        app: 'app',\r\n        ts: \"https://unpkg.com/plugin-typescript@4.0.10/lib/plugin.js\",\r\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\r\n        \"plugin-json\":\"https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js\",\r\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\r\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\r\n        \"@syncfusion/ej2-splitbuttons\": \"syncfusion:ej2-splitbuttons/dist/ej2-splitbuttons.umd.min.js\",\r\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\r\n        \"@syncfusion/ej2-maps\": \"syncfusion:ej2-maps/dist/ej2-maps.umd.min.js\",\r\n        \"@syncfusion/ej2-treemap\": \"syncfusion:ej2-treemap/dist/ej2-treemap.umd.min.js\",\r\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\r\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\r\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\r\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",\r\n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\r\n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",\r\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",\r\n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\r\n        \"@syncfusion/ej2-schedule\": \"syncfusion:ej2-schedule/dist/ej2-schedule.umd.min.js\",\r\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",        \r\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\r\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",        \r\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\",\r\n        \"@syncfusion/ej2-documenteditor\": \"syncfusion:ej2-documenteditor/dist/ej2-documenteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-notifications\": \"syncfusion:ej2-notifications/dist/ej2-notifications.umd.min.js\",\r\n        \"@syncfusion/ej2-richtexteditor\": \"syncfusion:ej2-richtexteditor/dist/ej2-richtexteditor.umd.min.js\",\r\n\t\t\"@syncfusion/ej2-svg-base\": \"syncfusion:ej2-svg-base/dist/ej2-svg-base.umd.min.js\",\r\n        \"@syncfusion/ej2-pivotview\": \"syncfusion:ej2-pivotview/dist/ej2-pivotview.umd.min.js\",\r\n        \"@syncfusion/ej2-heatmap\": \"syncfusion:ej2-heatmap/dist/ej2-heatmap.umd.min.js\",\r\n        \"@syncfusion/ej2-react-base\": \"syncfusion:ej2-react-base/dist/ej2-react-base.umd.min.js\",\r\n        \"@syncfusion/ej2-react-buttons\": \"syncfusion:ej2-react-buttons/dist/ej2-react-buttons.umd.min.js\",\r\n        \"@syncfusion/ej2-react-splitbuttons\": \"syncfusion:ej2-react-splitbuttons/dist/ej2-react-splitbuttons.umd.min.js\",\r\n        \"@syncfusion/ej2-react-charts\": \"syncfusion:ej2-react-charts/dist/ej2-react-charts.umd.min.js\",\r\n        \"@syncfusion/ej2-react-maps\": \"syncfusion:ej2-react-maps/dist/ej2-react-maps.umd.min.js\",\r\n        \"@syncfusion/ej2-react-treemap\": \"syncfusion:ej2-react-treemap/dist/ej2-react-treemap.umd.min.js\",\r\n        \"@syncfusion/ej2-react-circulargauge\": \"syncfusion:ej2-react-circulargauge/dist/ej2-react-circulargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-react-lineargauge\": \"syncfusion:ej2-react-lineargauge/dist/ej2-react-lineargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-react-calendars\": \"syncfusion:ej2-react-calendars/dist/ej2-react-calendars.umd.min.js\",\r\n        \"@syncfusion/ej2-react-dropdowns\": \"syncfusion:ej2-react-dropdowns/dist/ej2-react-dropdowns.umd.min.js\",\r\n        \"@syncfusion/ej2-react-grids\": \"syncfusion:ej2-react-grids/dist/ej2-react-grids.umd.min.js\",\r\n        \"@syncfusion/ej2-react-inputs\": \"syncfusion:ej2-react-inputs/dist/ej2-react-inputs.umd.min.js\",\r\n        \"@syncfusion/ej2-react-lists\": \"syncfusion:ej2-react-lists/dist/ej2-react-lists.umd.min.js\",\r\n        \"@syncfusion/ej2-react-navigations\": \"syncfusion:ej2-react-navigations/dist/ej2-react-navigations.umd.min.js\",\r\n        \"@syncfusion/ej2-react-popups\": \"syncfusion:ej2-react-popups/dist/ej2-react-popups.umd.min.js\",\r\n        \"@syncfusion/ej2-react-schedule\": \"syncfusion:ej2-react-schedule/dist/ej2-react-schedule.umd.min.js\",\r\n        \"@syncfusion/ej2-react-documenteditor\": \"syncfusion:ej2-react-documenteditor/dist/ej2-react-documenteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-react-notifications\": \"syncfusion:ej2-react-notifications/dist/ej2-react-notifications.umd.min.js\",\r\n        \"@syncfusion/ej2-react-richtexteditor\": \"syncfusion:ej2-react-richtexteditor/dist/ej2-react-richtexteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-react-pivotview\": \"syncfusion:ej2-react-pivotview/dist/ej2-react-pivotview.umd.min.js\",\r\n        \"@syncfusion/ej2-react-heatmap\": \"syncfusion:ej2-react-heatmap/dist/ej2-react-heatmap.umd.min.js\",\r\n        \"react-dom\":\"https://unpkg.com/react-dom@15.5.4/dist/react-dom.min.js\",\r\n        \"react\":\"https://unpkg.com/react@15.5.4/dist/react.min.js\",\r\n    },\r\n    packages: {\r\n        'app': { main: 'index', defaultExtension: 'tsx' },\r\n    }\r\n});\r\n\r\nSystem.import('app');","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Diagram · Port · Essential JS 2 for React · Syncfusion</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <!-- {{:meta}} -->\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <script type=\"text/javascript\">\r\n        var themeName = location.hash || 'material';\r\n        themeName = themeName.replace('#','');\r\n        window.ripple = (themeName === \"material\")\r\n        document.write('<link href=\"http://cdn.syncfusion.com/ej2/' + themeName + '.css\" rel=\"stylesheet\">');\r\n    </script>\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\r\n    <script src=\"systemjs.config.js\"></script>\r\n    <link href=\"index.css\" rel=\"stylesheet\" />\r\n     <style>\r\n        #loader {\r\n            color: #008cff;\r\n            height: 40px;\r\n            left: 45%;\r\n            position: absolute;\r\n            top: 45%;\r\n            width: 30%;\r\n        }\r\n        body {\r\n            touch-action:none;\r\n        }\r\n        .body {\r\n            font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n        }\r\n\r\n        .e-view {\r\n            bottom: 0;\r\n            left: 0;\r\n            overflow: hidden;\r\n            position: absolute;\r\n            right: 0;\r\n            top: 0;\r\n        }\r\n\r\n        .sb-left {\r\n            float: left;\r\n        }\r\n\r\n        .sb-right {\r\n            float: right;\r\n        }\r\n\r\n        .sb-block {\r\n            display: block;\r\n        }\r\n\r\n        .sb-table {\r\n            display: table;\r\n        }\r\n\r\n        .sb-table-cell {\r\n            display: table-cell;\r\n            vertical-align: middle;\r\n        }\r\n\r\n        /*sample header*/\r\n\r\n\r\n        .sb-header {\r\n            height: 48px;\r\n            background: #FFFFFF;\r\n            box-shadow: 0 2px 4px 0 rgba(0,0,0,0.12);\r\n            z-index: 1001;\r\n            opacity: 100;\r\n        }\r\n\r\n\r\n        .sb-header-left, .sb-header-right {\r\n            height: 100%;\r\n        }\r\n\r\n        #sb-header-text {\r\n            padding-left: 22px;\r\n            opacity: 0.87;\r\n            font-family: Roboto;\r\n            font-weight: 500;\r\n            font-size: 15px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n        .header-logo {\r\n            float: left;\r\n            padding-left: 8px;\r\n            padding-right: 22px;\r\n        }\r\n\r\n        .footer-logo {\r\n            background: url(https://ej2.syncfusion.com/home/images/footer-logo.svg) no-repeat right;\r\n            height: 40px;\r\n            width: 140px;\r\n        }\r\n\r\n        .sb-header-splitter {\r\n            float: left;\r\n            border-left: 1px solid rgb(196, 196, 196);\r\n            height: 32px;\r\n            margin-top: 8px;\r\n            padding-left: 22 px;\r\n        }\r\n\r\n        .sb-header-settings {\r\n            display: none;\r\n        }\r\n\r\n        .product-style a{\r\n        padding-right: 15px;\r\n        font-family:Roboto;\r\n        font-weight: 500;\r\n        font-size: 13px;\r\n        color: #363636;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        }\r\n        .product-style a:hover {\r\n            color:#3C78EF;\r\n        }\r\n\r\n        .sb-download-btn a {\r\n            text-decoration: none;\r\n        }\r\n\r\n        .sb-download-text {\r\n            color: #FFFFFF;\r\n        }\r\n\r\n        .sb-download-wrapper {\r\n            padding-right: 27px;\r\n        }\r\n\r\n        .sb-download-btn:hover .sb-download-btn:focus .sb-download-btn.active {\r\n            border-radius: 2px;\r\n            font-family: \"Roboto\";\r\n            font-weight: bold;\r\n            color: #FFFFFF;\r\n        }\r\n\r\n        .sb-download-btn:hover {\r\n            background: #006CE6;\r\n        }\r\n\r\n        .sb-download-btn:focus {\r\n            background: #0051CB;\r\n        }\r\n\r\n        .sb-download-btn.active {\r\n            background: #0036B1;\r\n        }\r\n\r\n        .sb-download-btn {\r\n            background-color: #3C78EF;\r\n            opacity: 100;\r\n            border-radius: 2px;\r\n            font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n            font-weight: 500;\r\n            line-height: 18px;\r\n            height: 32px;\r\n            border-color: transparent;\r\n        }\r\n\r\n        .sb-bread-crumb {\r\n            padding-left: 20px;\r\n            padding-top: 24px;\r\n            padding-bottom: 10px;\r\n        }\r\n\r\n        .category-allcontrols a, .category-text a, .crumb-sample {\r\n            display: table;\r\n            opacity: 0.87;\r\n            font-family: Roboto;\r\n            font-weight: 500;\r\n            font-size: 15px;\r\n            color: #3C78EF;\r\n            text-align: left;\r\n            text-decoration: none;\r\n        }\r\n\r\n        .sb-bread-crumb .sb-bread-crumb-text>div {\r\n            font-size: 15px;\r\n            font-weight: 500;\r\n            padding-right: 8px;\r\n            cursor: default;\r\n            display: table-cell;\r\n        }\r\n\r\n        .sb-bread-crumb-text>div.seperator {\r\n            font-weight: 700;\r\n            font-size: 15px;\r\n            vertical-align: bottom;\r\n        } \r\n\r\n        .content {\r\n        overflow: auto;\r\n        height: calc(100% - 50px);\r\n        top: 50px;\r\n        }\r\n\r\n\r\n        .sample-content {\r\n            top: 48px;\r\n            background: #FFFFFF;\r\n        }\r\n\r\n        .div {\r\n        display: block;\r\n        }\r\n\r\n        .control-section {\r\n            padding-left: 4px;\r\n        }\r\n\r\n        .crumb-sample {\r\n            color: #000000;\r\n            line-height: 18px;\r\n        }\r\n\r\n        #description {\r\n            padding-bottom: 16px;\r\n            padding-left: 20px;\r\n            opacity: 0.75;\r\n            font-family: Roboto;\r\n            font-size: 13px;\r\n            color: #000000;\r\n            text-align: left;\r\n            padding-top: 14px;\r\n        }\r\n\r\n        #action-description {\r\n            padding-left: 20px;\r\n            padding-bottom: 15px;\r\n            opacity: 0.75;\r\n            font-family: Roboto;\r\n            font-size: 13px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n        #description-section {\r\n            padding-left: 20px;\r\n            padding-top: 30px;\r\n            opacity: 0.87;\r\n            font-family:Roboto;\r\n            font-weight: 700;\r\n            font-size: 15px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n\r\n\r\n    </style>\r\n</head>\r\n\r\n<body class='e-view ej2-new' aria-busy=\"true\">\r\n        <div class=\"sample-browser\">\r\n            <div id='sample-header' class=\"sb-header\" role=\"banner\">\r\n                <div class='sb-header-left sb-left sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"header-logo\">\r\n                            <a href=\"https://ej2.syncfusion.com/home/react.html\" target=\"\" rel=\"noopener noreferrer\">\r\n                                <div class=\"footer-logo\"> </div>\r\n                            </a>\r\n                        </div>\r\n    \r\n                    </div>\r\n                    <div class=\"sb-header-splitter sb-download-splitter\"></div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div id='sb-header-text' class='e-sb-header-text'>\r\n    \r\n                            <span class='sb-header-text-left'>Essential JS 2 for React</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class='sb-header-right sb-right sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class='product-style'>\r\n                            <div><a href=\"https://www.syncfusion.com/products/react/diagram\">PRODUCT DETAILS</a></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"sb-header-item sb-table-cell sb-download-wrapper\">\r\n                            <a href=\"https://www.syncfusion.com/downloads/essential-js2\" target=\"_blank\">\r\n                                <button id=\"download-now\" class=\"sb-download-btn\">\r\n                                    <span class=\"sb-download-text\">DOWNLOAD</span>\r\n                                </button>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    \r\n            </div>\r\n            <div class ='content e-view'>\r\n            <div class='sample-content'>\r\n                <div id=\"sample-bread-crumb\" class=\"sb-bread-crumb\">\r\n                    <div class=\"sb-bread-crumb-text\">\r\n                        <div class=\"category-allcontrols\"><a href=\"https://ej2.syncfusion.com/react/demos\"><span>All Controls</span></a></div>\r\n                        <div class=\"category-seperator sb-icons\"> / </div>\r\n                        <div class=\"category-text bread-ctext\"><a href=\"https://ej2.syncfusion.com/react/demos/#/material/diagram/default.html\"><span>Diagram</span></a></div>\r\n                        <div class=\"category-seperator sb-icons\"> / </div>\r\n                        <div class=\"crumb-sample\">Port</div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"control-content\">\r\n                <div id=\"action-description\">\r\n                        <p>\r\n                            \n          <p>\n            This sample visualizes the process flow of publishing a book using\n            connection points. Connection points are static points over the\n            shapes that allow creating connections to the shapes. Customizing\n            the size and appearance of the connection points is illustrated in\n            this example.\n          </p>\n        \r\n                        </p>\r\n                    </div>\r\n                    <div class=\"container-fluid\">\r\n                        <div class=\"control-section\">\r\n                            <div id='sample'>\r\n                                <div id='loader'>Loading....</div>\r\n                            </div>\r\n                    \r\n                        </div>\r\n                    </div>\r\n                    <div id=\"description-section\">Description</div>    \r\n                    <div id=\"description\">\r\n                        <p>\r\n                           \n          <p>\n            This example shows how to add connection ports to shapes. The{&quot; &quot;}\n            <code>ports</code> property of the node defines the static\n            connection ports. The <code>offset</code>,\n            <code>horizontalAlignment</code>, <code>verticalAlignment</code> and{&quot; &quot;}\n            <code>margin</code> properties of the ports define its position.\n          </p>\n          <p>\n            The <code>style</code> property of the port can be used to customize\n            its appearance. The <code>visibility</code> property can also be\n            used to define when the connection ports should be visible.\n          </p>\n\n          <p>\n            In this example, the appearance and visibility of the ports can be\n            customized using the options added to the property panel.\n          </p>\n        \r\n                         </p>     \r\n                    </div>    \r\n                </div>             \r\n            </div>\r\n                \r\n            </div>\r\n        </div>\r\n          \r\n</body>\r\n</html>\r\n","app/index.tsx":"import * as ReactDOM from \"react-dom\";\r\nimport * as React from \"react\";\r\nimport {\r\n  PointPortModel,\r\n  PortVisibility,\r\n  DiagramComponent,\r\n  NodeModel,\r\n  ConnectorModel,\r\n  BasicShapeModel,\r\n  Node,\r\n  Connector,\r\n  Diagram\r\n} from \"@syncfusion/ej2-react-diagrams\";\r\nimport { SampleBase } from './sample-base';\r\nimport {\r\n  ChangeEventArgs,\r\n  DropDownListComponent\r\n} from \"@syncfusion/ej2-react-dropdowns\";\r\nimport {\r\n  MultiSelectComponent,\r\n  MultiSelectChangeEventArgs\r\n} from \"@syncfusion/ej2-react-dropdowns\";\r\nimport {\r\n  NumericTextBoxComponent,\r\n  ChangeEventArgs as NumericChangeEventArgs,\r\n  ColorPickerComponent,\r\n  ColorPickerEventArgs\r\n} from \"@syncfusion/ej2-react-inputs\";\r\n\r\nlet diagramInstance: DiagramComponent;\r\nlet portDrop: DropDownListComponent;\r\nlet portVisibilityDrop: MultiSelectComponent;\r\nlet portFillDrop: DropDownListComponent;\r\nlet portBorderDrop: DropDownListComponent;\r\nlet portShapeDrop: DropDownListComponent;\r\nlet portSizeNum: NumericTextBoxComponent;\r\nlet portWidthNum: NumericTextBoxComponent;\r\n\r\n//Initializes the ports for the diagram\r\nlet node1Port: CustomPort[] = [\r\n  {\r\n    id: \"port1\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0, y: 0.5 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"In - 1\"\r\n  },\r\n  {\r\n    id: \"port2\",\r\n    shape: \"Circle\",\r\n    offset: { x: 1, y: 0.5 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"OUT - 1\"\r\n  },\r\n  {\r\n    id: \"port3\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0.25, y: 1 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"In - 2\"\r\n  },\r\n  {\r\n    id: \"port4\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0.5, y: 1 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"OUT - 2\"\r\n  },\r\n  {\r\n    id: \"port5\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0.75, y: 1 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"In - 3\"\r\n  }\r\n];\r\n\r\nlet node2Port: CustomPort[] = [\r\n  {\r\n    id: \"port6\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0, y: 0.5 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"In - 1\"\r\n  },\r\n  {\r\n    id: \"port7\",\r\n    shape: \"Circle\",\r\n    offset: { x: 1, y: 0.35 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"OUT - 1\"\r\n  },\r\n  {\r\n    id: \"port8\",\r\n    shape: \"Circle\",\r\n    offset: { x: 1, y: 0.7 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"In - 2\"\r\n  },\r\n  {\r\n    id: \"port9\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0.5, y: 1 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"OUT - 2\"\r\n  }\r\n];\r\n\r\nlet node3Port: CustomPort[] = [\r\n  {\r\n    id: \"port10\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0, y: 0.5 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"Out - 1\"\r\n  },\r\n  {\r\n    id: \"port11\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0.5, y: 0 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"In - 1\"\r\n  },\r\n  {\r\n    id: \"port12\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0.5, y: 1 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"OUT - 2\"\r\n  }\r\n];\r\n\r\nlet node4Port: CustomPort[] = [\r\n  {\r\n    id: \"port13\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0, y: 0.5 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"In - 1\"\r\n  },\r\n  {\r\n    id: \"port14\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0.5, y: 0 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"In - 2\"\r\n  },\r\n  {\r\n    id: \"port15\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0.5, y: 1 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"OUT - 1\"\r\n  }\r\n];\r\n\r\nlet node5Port: CustomPort[] = [\r\n  {\r\n    id: \"port16\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0, y: 0.5 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"out - 1\"\r\n  },\r\n  {\r\n    id: \"port17\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0.5, y: 0 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"In - 1\"\r\n  },\r\n  {\r\n    id: \"port18\",\r\n    shape: \"Circle\",\r\n    offset: { x: 1, y: 0.5 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"OUT - 2\"\r\n  }\r\n];\r\n\r\nlet node6Port: CustomPort[] = [\r\n  {\r\n    id: \"port19\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0, y: 0.35 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"In - 1\"\r\n  },\r\n  {\r\n    id: \"port20\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0.5, y: 1 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"Out - 1\"\r\n  }\r\n];\r\n\r\nlet node7Port: CustomPort[] = [\r\n  {\r\n    id: \"port21\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0.5, y: 0 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"In - 1\"\r\n  },\r\n  {\r\n    id: \"port22\",\r\n    shape: \"Circle\",\r\n    offset: { x: 0.5, y: 1 },\r\n    height: 8,\r\n    width: 8,\r\n    visibility: PortVisibility.Visible,\r\n    text: \"Out - 1\"\r\n  }\r\n];\r\n\r\nlet shape1: BasicShapeModel = { type: \"Basic\", shape: \"Rectangle\" };\r\n\r\nlet shape2: BasicShapeModel = { type: \"Basic\", shape: \"Diamond\" };\r\n\r\nlet nodes: NodeModel[] = [\r\n  {\r\n    id: \"node1\",\r\n    offsetX: 100,\r\n    offsetY: 100,\r\n    annotations: [{ content: \"Publisher\" }],\r\n    ports: node1Port\r\n  },\r\n  {\r\n    id: \"node2\",\r\n    offsetX: 300,\r\n    offsetY: 100,\r\n    annotations: [{ content: \"Completed Book\", margin: { left: 5, right: 5 } }],\r\n    ports: node2Port\r\n  },\r\n  {\r\n    id: \"node3\",\r\n    offsetX: 300,\r\n    offsetY: 200,\r\n    annotations: [{ content: \"1st Review\" }],\r\n    ports: node3Port\r\n  },\r\n  {\r\n    id: \"node4\",\r\n    offsetX: 300,\r\n    offsetY: 300,\r\n    annotations: [{ content: \"Legal Terms\" }],\r\n    ports: node4Port\r\n  },\r\n  {\r\n    id: \"node5\",\r\n    offsetX: 300,\r\n    offsetY: 400,\r\n    annotations: [{ content: \"2nd Review\" }],\r\n    ports: node5Port\r\n  },\r\n  {\r\n    id: \"node6\",\r\n    offsetX: 500,\r\n    offsetY: 100,\r\n    annotations: [{ content: \"Board\" }],\r\n    ports: node6Port\r\n  },\r\n  {\r\n    id: \"node7\",\r\n    offsetX: 500,\r\n    offsetY: 200,\r\n    annotations: [{ content: \"Approval\" }],\r\n    ports: node7Port\r\n  }\r\n];\r\nlet connectors: ConnectorModel[] = [\r\n  {\r\n    id: \"connector1\",\r\n    sourceID: \"node1\",\r\n    sourcePortID: \"port2\",\r\n    targetID: \"node2\",\r\n    targetPortID: \"port6\"\r\n  },\r\n  {\r\n    id: \"connector2\",\r\n    sourceID: \"node1\",\r\n    sourcePortID: \"port4\",\r\n    targetID: \"node4\",\r\n    targetPortID: \"port13\"\r\n  },\r\n  {\r\n    id: \"connector3\",\r\n    sourceID: \"node2\",\r\n    sourcePortID: \"port9\",\r\n    targetID: \"node3\",\r\n    targetPortID: \"port11\"\r\n  },\r\n  {\r\n    id: \"connector4\",\r\n    sourceID: \"node2\",\r\n    sourcePortID: \"port7\",\r\n    targetID: \"node6\",\r\n    targetPortID: \"port19\"\r\n  },\r\n  {\r\n    id: \"connector5\",\r\n    sourceID: \"node3\",\r\n    sourcePortID: \"port10\",\r\n    targetID: \"node1\",\r\n    targetPortID: \"port5\"\r\n  },\r\n  {\r\n    id: \"connector6\",\r\n    sourceID: \"node3\",\r\n    sourcePortID: \"port12\",\r\n    targetID: \"node4\",\r\n    targetPortID: \"port14\"\r\n  },\r\n  {\r\n    id: \"connector7\",\r\n    sourceID: \"node4\",\r\n    sourcePortID: \"port15\",\r\n    targetID: \"node5\",\r\n    targetPortID: \"port17\"\r\n  },\r\n  {\r\n    id: \"connector8\",\r\n    sourceID: \"node5\",\r\n    sourcePortID: \"port18\",\r\n    targetID: \"node2\",\r\n    targetPortID: \"port8\"\r\n  },\r\n  {\r\n    id: \"connector9\",\r\n    sourceID: \"node5\",\r\n    sourcePortID: \"port16\",\r\n    targetID: \"node1\",\r\n    targetPortID: \"port3\"\r\n  },\r\n  {\r\n    id: \"connector10\",\r\n    sourceID: \"node6\",\r\n    sourcePortID: \"port20\",\r\n    targetID: \"node7\",\r\n    targetPortID: \"port21\"\r\n  },\r\n  {\r\n    id: \"connector11\",\r\n    sourceID: \"node7\",\r\n    sourcePortID: \"port22\",\r\n    targetID: \"node1\",\r\n    targetPortID: \"port1\"\r\n  }\r\n];\r\nlet fillColor: ColorPickerComponent;\r\nlet strokeColor: ColorPickerComponent;\r\n//Visibility collection of the Port.\r\nlet visibility: { [key: string]: Object }[] = [\r\n  { PortVisibility: PortVisibility.Visible, text: \"Visible\" },\r\n  { PortVisibility: PortVisibility.Hidden, text: \"Hidden\" },\r\n  { PortVisibility: PortVisibility.Hover, text: \"Hover\" },\r\n  { PortVisibility: PortVisibility.Connect, text: \"Connect\" }\r\n];\r\n\r\n//Color collection of the Port.\r\nlet color: { [key: string]: Object }[] = [\r\n  { text: \"White\", color: \"white\" },\r\n  { text: \"#008080\", color: \"#008080\" },\r\n  { text: \"#E4B123\", color: \"#E4B123\" },\r\n  { text: \"#F05023\", color: \"#F05023\" },\r\n  { text: \"#3CB549\", color: \"#3CB549\" },\r\n  { text: \"#D572AD\", color: \"#D572AD\" },\r\n  { text: \"Black\", color: \"black\" },\r\n  { text: \"Goldenrod\", color: \"goldenrod\" },\r\n  { text: \"Indigo\", color: \"indigo\" },\r\n  { text: \"Chocolate\", color: \"chocolate\" },\r\n  { text: \"DarkGoldenRod\", color: \"darkgoldenrod\" },\r\n  { text: \"FireBrick\", color: \"firebrick\" },\r\n  { text: \"DarkRed\", color: \"darkred\" }\r\n];\r\n\r\n//Shape collection of the Port.\r\nlet shape: { [key: string]: Object }[] = [\r\n  { shape: \"X\", text: \"X\" },\r\n  { shape: \"Circle\", text: \"Circle\" },\r\n  { shape: \"Square\", text: \"Square\" },\r\n  { shape: \"Custom\", text: \"Custom\" }\r\n];\r\nconst sample_css = ` \r\n.sb-child-row {\r\n  margin-top: 8px;\r\n}\r\n\r\n.property-panel-header {\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n}\r\n\r\n.property-section .e-remove-selection{\r\n  cursor: not-allowed;\r\n}\r\n\r\n.row-header {\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n  padding-left: 10px\r\n}\r\n\r\n.e-remove-selection .property-section-content {\r\n  pointer-events: none;\r\n}`;\r\nexport class Port extends SampleBase<{}, {}> {\r\n  rendereComplete() {\r\n    diagramInstance.select([diagramInstance.nodes[0]]);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"control-pane\">\r\n        <style>{sample_css}</style>\r\n        <div className=\"col-lg-8 control-section\">\r\n          <DiagramComponent\r\n            id=\"diagram\"\r\n            ref={diagram => (diagramInstance = diagram)}\r\n            width={\"100%\"}\r\n            height={580}\r\n            nodes={nodes}\r\n            connectors={connectors}\r\n            selectionChange={selectChange}\r\n            snapSettings={{ constraints: 0 }}\r\n            getNodeDefaults={(obj: Node) => {\r\n              //Sets the default values of nodes\r\n              //Initialize shape\r\n              if (\r\n                obj.id === \"node1\" ||\r\n                obj.id === \"node2\" ||\r\n                obj.id === \"node4\" ||\r\n                obj.id === \"node6\"\r\n              ) {\r\n                obj.shape = shape1;\r\n              } else if (\r\n                obj.id === \"node3\" ||\r\n                obj.id === \"node5\" ||\r\n                obj.id === \"node7\"\r\n              ) {\r\n                obj.shape = shape2;\r\n              }\r\n              //sets height and width for nodes\r\n              obj.height = 65;\r\n              obj.width = 100;\r\n              obj.style = { fill: \"#ebf8fb\", strokeColor: \"#baeaf5\" };\r\n              for (let i: number = 0; i < obj.ports.length; i++) {\r\n                //sets styles for the ports\r\n                obj.ports[i].style = {\r\n                  fill: \"#366f8c\",\r\n                  strokeColor: \"#366f8c\"\r\n                };\r\n                obj.ports[i].width = 6;\r\n                obj.ports[i].height = 6;\r\n              }\r\n              obj.annotations[0].style = {\r\n                bold: true,\r\n                fontSize: 13,\r\n                color: \"black\"\r\n              };\r\n            }}\r\n            getConnectorDefaults={(connector: Connector) => {\r\n              //Sets the default values of connector\r\n              //defines type of the connectors\r\n              connector.type = \"Orthogonal\";\r\n              connector.style = { strokeColor: \"#8cdcef\", strokeWidth: 1 };\r\n              connector.targetDecorator = {\r\n                width: 5,\r\n                height: 5,\r\n                style: { fill: \"#8cdcef\", strokeColor: \"#8cdcef\" }\r\n              };\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-lg-4 property-section\">\r\n          <div className=\"property-panel-header\">Properties</div>\r\n          <div className=\"property-panel-content\">\r\n            <div id=\"propertypanel\" className=\"e-remove-selection\">\r\n              <div className=\"property-section-content\">\r\n                <div className=\"row row-header\" style={{ fontSize: \"13px\" }}>\r\n                  Port Customization\r\n              </div>\r\n                <div className=\"row sb-child-row\">\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingBottom: \"8px\" }}>Visibility</div>\r\n                    <div>\r\n                      {/* Enable or disable the visibility of the Port */}\r\n                      <MultiSelectComponent\r\n                        id=\"portsVisiblity\"\r\n                        enabled={true}\r\n                        dataSource={visibility}\r\n                        fields={{ value: \"PortVisibility\", text: \"text\" }}\r\n                        mode=\"CheckBox\"\r\n                        showSelectAll={true}\r\n                        showDropDownIcon={true}\r\n                        popupHeight={\"280px\"}\r\n                        popupWidth={\"180px\"}\r\n                        change={portVisibilityDropOnChange}\r\n                        ref={portVisibilityref =>\r\n                          (portVisibilityDrop = portVisibilityref)\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingBottom: \"8px\" }}>Shape</div>\r\n                    <div>\r\n                      {/* DropDownList is used to apply the shape of the Port. */}\r\n                      <DropDownListComponent\r\n                        id=\"shape\"\r\n                        enabled={true}\r\n                        placeholder=\"Select a Shape\"\r\n                        dataSource={shape}\r\n                        value=\"Circle\"\r\n                        fields={{ value: \"shape\", text: \"text\" }}\r\n                        change={portShapeDropOnChange}\r\n                        ref={portShapeDropref =>\r\n                          (portShapeDrop = portShapeDropref)\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row sb-child-row\">\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingBottom: \"8px\" }}>Fill Color</div>\r\n                    <div style={{ paddingBottom: \"8px\" }}>\r\n                      {/* DropDownList is used to apply the fill color of the Port. */}\r\n                      <ColorPickerComponent\r\n                        id=\"fillcolor\"\r\n                        value=\"#000\"\r\n                        disabled={false}\r\n                        change={(arg: ColorPickerEventArgs) => {\r\n                          let port: PointPortModel[] = getPort();\r\n                          for (let j: number = 0; j < port.length; j++) {\r\n                            port[j].style.fill = arg.currentValue.rgba;\r\n                          }\r\n                        }}\r\n                        ref={fillcolor => (fillColor = fillcolor)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingBottom: \"8px\" }}>Stroke Color</div>\r\n                    <div style={{ paddingBottom: \"8px\" }}>\r\n                      {/* DropDownList is used to apply the fill color of the Port. */}\r\n                      <ColorPickerComponent\r\n                        id=\"strokecolor\"\r\n                        value=\"#000\"\r\n                        disabled={false}\r\n                        change={(arg: ColorPickerEventArgs) => {\r\n                          let port: PointPortModel[] = getPort();\r\n                          for (let j: number = 0; j < port.length; j++) {\r\n                            port[j].style.strokeColor = arg.currentValue.rgba;\r\n                          }\r\n                        }}\r\n                        ref={strokecolor => (strokeColor = strokecolor)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row sb-child-row\">\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingBottom: \"8px\" }}>Stroke Width</div>\r\n                    <div style={{ paddingBottom: \"8px\" }}>\r\n                      {/* NumericTextBox is used to apply the StrokeWidth of the Port. */}\r\n                      <NumericTextBoxComponent\r\n                        ref={widthRef => (portWidthNum = widthRef)}\r\n                        id=\"width\"\r\n                        enabled={true}\r\n                        format={\"###.##\"}\r\n                        value={1}\r\n                        step={0.5}\r\n                        change={(args: NumericChangeEventArgs) => {\r\n                          applyportstyle(\"strokewidth\");\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col-lg-6\">\r\n                    <div style={{ paddingBottom: \"8px\" }}>Size</div>\r\n                    <div style={{ paddingBottom: \"8px\" }}>\r\n                      {/* NumericTextBox is used to apply the size of the Port. */}\r\n                      <NumericTextBoxComponent\r\n                        ref={sizeRef => (portSizeNum = sizeRef)}\r\n                        id=\"size\"\r\n                        enabled={true}\r\n                        format={\"###.##\"}\r\n                        value={6}\r\n                        step={1}\r\n                        change={(args: NumericChangeEventArgs) => {\r\n                          applyportstyle(\"size\");\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction selectChange(args: any): void {\r\n  if (args.state === \"Changed\") {\r\n    let appearance: HTMLElement = document.getElementById(\"propertypanel\");\r\n    let selectedElement: HTMLCollection = document.getElementsByClassName(\r\n      \"e-remove-selection\"\r\n    );\r\n    if (args.newValue) {\r\n      if (!appearance.classList.contains(\"e-remove-selection\")) {\r\n        appearance.classList.add(\"e-remove-selection\");\r\n      }\r\n      if (args.newValue[0] instanceof Node && selectedElement.length) {\r\n        selectedElement[0].classList.remove(\"e-remove-selection\");\r\n        let port: PointPortModel[] = getPort();\r\n        portVisibilityDrop.value = [] as number[];\r\n        if (PortVisibility.Visible & port[0].visibility) {\r\n          portVisibilityDrop.value.push(PortVisibility.Visible);\r\n        }\r\n        if (PortVisibility.Hidden & port[0].visibility) {\r\n          portVisibilityDrop.value.push(PortVisibility.Hidden);\r\n        }\r\n        if (PortVisibility.Hover & port[0].visibility) {\r\n          portVisibilityDrop.value.push(PortVisibility.Hover);\r\n        }\r\n        if (PortVisibility.Connect & port[0].visibility) {\r\n          portVisibilityDrop.value.push(PortVisibility.Connect);\r\n        }\r\n        if (portVisibilityDrop.value.length === 0) {\r\n          portVisibilityDrop.placeholder = 'Select Visibility';\r\n        }\r\n        portVisibilityDrop.dataBind();\r\n        portFillDrop.value = port[0].style.fill;\r\n        portFillDrop.dataBind();\r\n        portBorderDrop.value = port[0].style.strokeColor;\r\n        portBorderDrop.dataBind();\r\n        portShapeDrop.value = port[0].shape;\r\n        portShapeDrop.dataBind();\r\n        portSizeNum.value = port[0].height;\r\n        portSizeNum.dataBind();\r\n        portWidthNum.value = port[0].style.strokeWidth;\r\n        portWidthNum.dataBind();\r\n      }\r\n    }\r\n  }\r\n}\r\n//get the port for the selected node.\r\nfunction getPort(): PointPortModel[] {\r\n  let node: NodeModel = diagramInstance.selectedItems.nodes[0];\r\n  let port: PointPortModel[];\r\n  if (node) {\r\n    port = node.ports;\r\n  }\r\n  return port;\r\n}\r\n\r\n//change the Visibility of the Port.\r\nfunction portVisibilityDropOnChange(args: MultiSelectChangeEventArgs): void {\r\n  let port: PointPortModel[] = getPort();\r\n  if (port) {\r\n    for (let j: number = 0; j < port.length; j++) {\r\n      port[j].visibility = 0;\r\n      for (let i: number = 0; i < args.value.length; i++) {\r\n        port[j].visibility += args.value[i] as PortVisibility;\r\n      }\r\n      diagramInstance.dataBind();\r\n    }\r\n  }\r\n}\r\n//change the shape of the Port.\r\nfunction portShapeDropOnChange(args: ChangeEventArgs): void {\r\n  let port: PointPortModel[] = getPort();\r\n  for (let j: number = 0; j < port.length; j++) {\r\n    switch (portShapeDrop.value) {\r\n      case \"X\":\r\n        port[j].shape = \"X\";\r\n        break;\r\n      case \"Circle\":\r\n        port[j].shape = \"Circle\";\r\n        break;\r\n      case \"Square\":\r\n        port[j].shape = \"Square\";\r\n        break;\r\n      case \"Custom\":\r\n        port[j].shape = \"Custom\";\r\n        port[j].pathData = \"M6.805,0L13.61,10.703L0,10.703z\";\r\n        break;\r\n    }\r\n    diagramInstance.dataBind();\r\n  }\r\n}\r\n\r\n//set the appearence of the Port.\r\nfunction applyportstyle(value: string): void {\r\n  let port: PointPortModel[] = getPort();\r\n  for (let j: number = 0; j < port.length; j++) {\r\n    if (value === \"size\" && portSizeNum) {\r\n      port[j].height = portSizeNum.value;\r\n      port[j].width = portSizeNum.value;\r\n    } else if (value === \"strokewidth\" && portWidthNum) {\r\n      port[j].style.strokeWidth = portWidthNum.value;\r\n    }\r\n  }\r\n  diagramInstance.dataBind();\r\n}\r\n\r\nexport interface CustomPort extends PointPortModel {\r\n  text: string;\r\n}\nReactDOM.render(<Port />, document.getElementById('sample'));","app/sample-base.tsx":"import * as ReactDOM from 'react-dom';\r\nimport * as React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { enableRipple } from '@syncfusion/ej2-base';\r\n\r\nenableRipple((window as any).ripple);\r\nexport class SampleBase<P, S> extends React.PureComponent<RouteComponentProps<any> & P, S>{\r\n    public rendereComplete(): void {\r\n        /**custom render complete function */\r\n    }\r\n    componentDidMount(): void {\r\n        setTimeout(() => {\r\n            this.rendereComplete();\r\n        }\r\n        );\r\n    }\r\n}"}