{"index.css":"","systemjs.config.js":"System.config({\r\n    transpiler: \"ts\",\r\n    typescriptOptions: {\r\n            target: \"es5\",\r\n            module: \"commonjs\",\r\n            moduleResolution: \"node\",\r\n            emitDecoratorMetadata: true,\r\n            experimentalDecorators: true,\r\n            \"jsx\": \"react\"\r\n    },\r\n     meta: {\r\n      'typescript': {\r\n        \"exports\": \"ts\"\r\n      },\r\n      '*.json': { loader: 'plugin-json' }\r\n    },\r\n    paths: {\r\n        \"syncfusion:\": \"http://cdn.syncfusion.com/ej2/\"},\r\n    map: {\r\n        app: 'app',\r\n        ts: \"https://unpkg.com/plugin-typescript@4.0.10/lib/plugin.js\",\r\n        typescript: \"https://unpkg.com/typescript@2.2.2/lib/typescript.js\",\r\n        \"plugin-json\":\"https://cdnjs.cloudflare.com/ajax/libs/systemjs-plugin-json/0.3.0/json.min.js\",\r\n        \"@syncfusion/ej2-base\": \"syncfusion:ej2-base/dist/ej2-base.umd.min.js\",\r\n        \"@syncfusion/ej2-buttons\": \"syncfusion:ej2-buttons/dist/ej2-buttons.umd.min.js\",\r\n        \"@syncfusion/ej2-splitbuttons\": \"syncfusion:ej2-splitbuttons/dist/ej2-splitbuttons.umd.min.js\",\r\n        \"@syncfusion/ej2-charts\": \"syncfusion:ej2-charts/dist/ej2-charts.umd.min.js\",\r\n        \"@syncfusion/ej2-maps\": \"syncfusion:ej2-maps/dist/ej2-maps.umd.min.js\",\r\n        \"@syncfusion/ej2-treemap\": \"syncfusion:ej2-treemap/dist/ej2-treemap.umd.min.js\",\r\n        \"@syncfusion/ej2-circulargauge\": \"syncfusion:ej2-circulargauge/dist/ej2-circulargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-lineargauge\": \"syncfusion:ej2-lineargauge/dist/ej2-lineargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-calendars\": \"syncfusion:ej2-calendars/dist/ej2-calendars.umd.min.js\",\r\n        \"@syncfusion/ej2-data\": \"syncfusion:ej2-data/dist/ej2-data.umd.min.js\",\r\n        \"@syncfusion/ej2-dropdowns\": \"syncfusion:ej2-dropdowns/dist/ej2-dropdowns.umd.min.js\",\r\n        \"@syncfusion/ej2-grids\": \"syncfusion:ej2-grids/dist/ej2-grids.umd.min.js\",\r\n        \"@syncfusion/ej2-lists\": \"syncfusion:ej2-lists/dist/ej2-lists.umd.min.js\",\r\n        \"@syncfusion/ej2-inputs\": \"syncfusion:ej2-inputs/dist/ej2-inputs.umd.min.js\",\r\n        \"@syncfusion/ej2-navigations\": \"syncfusion:ej2-navigations/dist/ej2-navigations.umd.min.js\",\r\n        \"@syncfusion/ej2-popups\": \"syncfusion:ej2-popups/dist/ej2-popups.umd.min.js\",\r\n        \"@syncfusion/ej2-schedule\": \"syncfusion:ej2-schedule/dist/ej2-schedule.umd.min.js\",\r\n        \"@syncfusion/ej2-pdf-export\": \"syncfusion:ej2-pdf-export/dist/ej2-pdf-export.umd.min.js\",        \r\n        \"@syncfusion/ej2-compression\": \"syncfusion:ej2-compression/dist/ej2-compression.umd.min.js\",\r\n        \"@syncfusion/ej2-excel-export\": \"syncfusion:ej2-excel-export/dist/ej2-excel-export.umd.min.js\",        \r\n        \"@syncfusion/ej2-file-utils\": \"syncfusion:ej2-file-utils/dist/ej2-file-utils.umd.min.js\",\r\n        \"@syncfusion/ej2-documenteditor\": \"syncfusion:ej2-documenteditor/dist/ej2-documenteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-notifications\": \"syncfusion:ej2-notifications/dist/ej2-notifications.umd.min.js\",\r\n        \"@syncfusion/ej2-richtexteditor\": \"syncfusion:ej2-richtexteditor/dist/ej2-richtexteditor.umd.min.js\",\r\n\t\t\"@syncfusion/ej2-svg-base\": \"syncfusion:ej2-svg-base/dist/ej2-svg-base.umd.min.js\",\r\n        \"@syncfusion/ej2-pivotview\": \"syncfusion:ej2-pivotview/dist/ej2-pivotview.umd.min.js\",\r\n        \"@syncfusion/ej2-heatmap\": \"syncfusion:ej2-heatmap/dist/ej2-heatmap.umd.min.js\",\r\n        \"@syncfusion/ej2-react-base\": \"syncfusion:ej2-react-base/dist/ej2-react-base.umd.min.js\",\r\n        \"@syncfusion/ej2-react-buttons\": \"syncfusion:ej2-react-buttons/dist/ej2-react-buttons.umd.min.js\",\r\n        \"@syncfusion/ej2-react-splitbuttons\": \"syncfusion:ej2-react-splitbuttons/dist/ej2-react-splitbuttons.umd.min.js\",\r\n        \"@syncfusion/ej2-react-charts\": \"syncfusion:ej2-react-charts/dist/ej2-react-charts.umd.min.js\",\r\n        \"@syncfusion/ej2-react-maps\": \"syncfusion:ej2-react-maps/dist/ej2-react-maps.umd.min.js\",\r\n        \"@syncfusion/ej2-react-treemap\": \"syncfusion:ej2-react-treemap/dist/ej2-react-treemap.umd.min.js\",\r\n        \"@syncfusion/ej2-react-circulargauge\": \"syncfusion:ej2-react-circulargauge/dist/ej2-react-circulargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-react-lineargauge\": \"syncfusion:ej2-react-lineargauge/dist/ej2-react-lineargauge.umd.min.js\",\r\n        \"@syncfusion/ej2-react-calendars\": \"syncfusion:ej2-react-calendars/dist/ej2-react-calendars.umd.min.js\",\r\n        \"@syncfusion/ej2-react-dropdowns\": \"syncfusion:ej2-react-dropdowns/dist/ej2-react-dropdowns.umd.min.js\",\r\n        \"@syncfusion/ej2-react-grids\": \"syncfusion:ej2-react-grids/dist/ej2-react-grids.umd.min.js\",\r\n        \"@syncfusion/ej2-react-inputs\": \"syncfusion:ej2-react-inputs/dist/ej2-react-inputs.umd.min.js\",\r\n        \"@syncfusion/ej2-react-lists\": \"syncfusion:ej2-react-lists/dist/ej2-react-lists.umd.min.js\",\r\n        \"@syncfusion/ej2-react-navigations\": \"syncfusion:ej2-react-navigations/dist/ej2-react-navigations.umd.min.js\",\r\n        \"@syncfusion/ej2-react-popups\": \"syncfusion:ej2-react-popups/dist/ej2-react-popups.umd.min.js\",\r\n        \"@syncfusion/ej2-react-schedule\": \"syncfusion:ej2-react-schedule/dist/ej2-react-schedule.umd.min.js\",\r\n        \"@syncfusion/ej2-react-documenteditor\": \"syncfusion:ej2-react-documenteditor/dist/ej2-react-documenteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-react-notifications\": \"syncfusion:ej2-react-notifications/dist/ej2-react-notifications.umd.min.js\",\r\n        \"@syncfusion/ej2-react-richtexteditor\": \"syncfusion:ej2-react-richtexteditor/dist/ej2-react-richtexteditor.umd.min.js\",\r\n        \"@syncfusion/ej2-react-pivotview\": \"syncfusion:ej2-react-pivotview/dist/ej2-react-pivotview.umd.min.js\",\r\n        \"@syncfusion/ej2-react-heatmap\": \"syncfusion:ej2-react-heatmap/dist/ej2-react-heatmap.umd.min.js\",\r\n        \"react-dom\":\"https://unpkg.com/react-dom@15.5.4/dist/react-dom.min.js\",\r\n        \"react\":\"https://unpkg.com/react@15.5.4/dist/react.min.js\",\r\n    },\r\n    packages: {\r\n        'app': { main: 'index', defaultExtension: 'tsx' },\r\n    }\r\n});\r\n\r\nSystem.import('app');","index.html":"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Sparkline · LiveUpdate · Essential JS 2 for React · Syncfusion</title>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\" />\r\n    <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\r\n    <!-- {{:meta}} -->\r\n    <meta name=\"author\" content=\"Syncfusion\" />\r\n    <script type=\"text/javascript\">\r\n        var themeName = location.hash || 'material';\r\n        themeName = themeName.replace('#','');\r\n        window.ripple = (themeName === \"material\")\r\n        document.write('<link href=\"http://cdn.syncfusion.com/ej2/' + themeName + '.css\" rel=\"stylesheet\">');\r\n    </script>\r\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/systemjs/0.19.38/system.js\"></script>\r\n    <script src=\"systemjs.config.js\"></script>\r\n    <link href=\"index.css\" rel=\"stylesheet\" />\r\n     <style>\r\n        #loader {\r\n            color: #008cff;\r\n            height: 40px;\r\n            left: 45%;\r\n            position: absolute;\r\n            top: 45%;\r\n            width: 30%;\r\n        }\r\n        body {\r\n            touch-action:none;\r\n        }\r\n        .body {\r\n            font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n        }\r\n\r\n        .e-view {\r\n            bottom: 0;\r\n            left: 0;\r\n            overflow: hidden;\r\n            position: absolute;\r\n            right: 0;\r\n            top: 0;\r\n        }\r\n\r\n        .sb-left {\r\n            float: left;\r\n        }\r\n\r\n        .sb-right {\r\n            float: right;\r\n        }\r\n\r\n        .sb-block {\r\n            display: block;\r\n        }\r\n\r\n        .sb-table {\r\n            display: table;\r\n        }\r\n\r\n        .sb-table-cell {\r\n            display: table-cell;\r\n            vertical-align: middle;\r\n        }\r\n\r\n        /*sample header*/\r\n\r\n\r\n        .sb-header {\r\n            height: 48px;\r\n            background: #FFFFFF;\r\n            box-shadow: 0 2px 4px 0 rgba(0,0,0,0.12);\r\n            z-index: 1001;\r\n            opacity: 100;\r\n        }\r\n\r\n\r\n        .sb-header-left, .sb-header-right {\r\n            height: 100%;\r\n        }\r\n\r\n        #sb-header-text {\r\n            padding-left: 22px;\r\n            opacity: 0.87;\r\n            font-family: Roboto;\r\n            font-weight: 500;\r\n            font-size: 15px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n        .header-logo {\r\n            float: left;\r\n            padding-left: 8px;\r\n            padding-right: 22px;\r\n        }\r\n\r\n        .footer-logo {\r\n            background: url(https://ej2.syncfusion.com/home/images/footer-logo.svg) no-repeat right;\r\n            height: 40px;\r\n            width: 140px;\r\n        }\r\n\r\n        .sb-header-splitter {\r\n            float: left;\r\n            border-left: 1px solid rgb(196, 196, 196);\r\n            height: 32px;\r\n            margin-top: 8px;\r\n            padding-left: 22 px;\r\n        }\r\n\r\n        .sb-header-settings {\r\n            display: none;\r\n        }\r\n\r\n        .product-style a{\r\n        padding-right: 15px;\r\n        font-family:Roboto;\r\n        font-weight: 500;\r\n        font-size: 13px;\r\n        color: #363636;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        }\r\n        .product-style a:hover {\r\n            color:#3C78EF;\r\n        }\r\n\r\n        .sb-download-btn a {\r\n            text-decoration: none;\r\n        }\r\n\r\n        .sb-download-text {\r\n            color: #FFFFFF;\r\n        }\r\n\r\n        .sb-download-wrapper {\r\n            padding-right: 27px;\r\n        }\r\n\r\n        .sb-download-btn:hover .sb-download-btn:focus .sb-download-btn.active {\r\n            border-radius: 2px;\r\n            font-family: \"Roboto\";\r\n            font-weight: bold;\r\n            color: #FFFFFF;\r\n        }\r\n\r\n        .sb-download-btn:hover {\r\n            background: #006CE6;\r\n        }\r\n\r\n        .sb-download-btn:focus {\r\n            background: #0051CB;\r\n        }\r\n\r\n        .sb-download-btn.active {\r\n            background: #0036B1;\r\n        }\r\n\r\n        .sb-download-btn {\r\n            background-color: #3C78EF;\r\n            opacity: 100;\r\n            border-radius: 2px;\r\n            font-family: \"Roboto\", \"Segoe UI\", \"GeezaPro\", \"DejaVu Serif\", \"sans-serif\";\r\n            font-weight: 500;\r\n            line-height: 18px;\r\n            height: 32px;\r\n            border-color: transparent;\r\n        }\r\n\r\n        .sb-bread-crumb {\r\n            padding-left: 20px;\r\n            padding-top: 24px;\r\n            padding-bottom: 10px;\r\n        }\r\n\r\n        .category-allcontrols a, .category-text a, .crumb-sample {\r\n            display: table;\r\n            opacity: 0.87;\r\n            font-family: Roboto;\r\n            font-weight: 500;\r\n            font-size: 15px;\r\n            color: #3C78EF;\r\n            text-align: left;\r\n            text-decoration: none;\r\n        }\r\n\r\n        .sb-bread-crumb .sb-bread-crumb-text>div {\r\n            font-size: 15px;\r\n            font-weight: 500;\r\n            padding-right: 8px;\r\n            cursor: default;\r\n            display: table-cell;\r\n        }\r\n\r\n        .sb-bread-crumb-text>div.seperator {\r\n            font-weight: 700;\r\n            font-size: 15px;\r\n            vertical-align: bottom;\r\n        } \r\n\r\n        .content {\r\n        overflow: auto;\r\n        height: calc(100% - 50px);\r\n        top: 50px;\r\n        }\r\n\r\n\r\n        .sample-content {\r\n            top: 48px;\r\n            background: #FFFFFF;\r\n        }\r\n\r\n        .div {\r\n        display: block;\r\n        }\r\n\r\n        .control-section {\r\n            padding-left: 4px;\r\n        }\r\n\r\n        .crumb-sample {\r\n            color: #000000;\r\n            line-height: 18px;\r\n        }\r\n\r\n        #description {\r\n            padding-bottom: 16px;\r\n            padding-left: 20px;\r\n            opacity: 0.75;\r\n            font-family: Roboto;\r\n            font-size: 13px;\r\n            color: #000000;\r\n            text-align: left;\r\n            padding-top: 14px;\r\n        }\r\n\r\n        #action-description {\r\n            padding-left: 20px;\r\n            padding-bottom: 15px;\r\n            opacity: 0.75;\r\n            font-family: Roboto;\r\n            font-size: 13px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n        #description-section {\r\n            padding-left: 20px;\r\n            padding-top: 30px;\r\n            opacity: 0.87;\r\n            font-family:Roboto;\r\n            font-weight: 700;\r\n            font-size: 15px;\r\n            color: #000000;\r\n            text-align: left;\r\n        }\r\n\r\n\r\n\r\n    </style>\r\n</head>\r\n\r\n<body class='e-view ej2-new' aria-busy=\"true\">\r\n        <div class=\"sample-browser\">\r\n            <div id='sample-header' class=\"sb-header\" role=\"banner\">\r\n                <div class='sb-header-left sb-left sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"header-logo\">\r\n                            <a href=\"https://ej2.syncfusion.com/home/react.html\" target=\"\" rel=\"noopener noreferrer\">\r\n                                <div class=\"footer-logo\"> </div>\r\n                            </a>\r\n                        </div>\r\n    \r\n                    </div>\r\n                    <div class=\"sb-header-splitter sb-download-splitter\"></div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div id='sb-header-text' class='e-sb-header-text'>\r\n    \r\n                            <span class='sb-header-text-left'>Essential JS 2 for React</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class='sb-header-right sb-right sb-table'>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class='product-style'>\r\n                            <div><a href=\"https://www.syncfusion.com/products/react/sparkline\">PRODUCT DETAILS</a></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class='sb-header-item sb-table-cell'>\r\n                        <div class=\"sb-header-item sb-table-cell sb-download-wrapper\">\r\n                            <a href=\"https://www.syncfusion.com/downloads/essential-js2\" target=\"_blank\">\r\n                                <button id=\"download-now\" class=\"sb-download-btn\">\r\n                                    <span class=\"sb-download-text\">DOWNLOAD</span>\r\n                                </button>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n    \r\n            </div>\r\n            <div class ='content e-view'>\r\n            <div class='sample-content'>\r\n                <div id=\"sample-bread-crumb\" class=\"sb-bread-crumb\">\r\n                    <div class=\"sb-bread-crumb-text\">\r\n                        <div class=\"category-allcontrols\"><a href=\"https://ej2.syncfusion.com/react/demos\"><span>All Controls</span></a></div>\r\n                        <div class=\"category-seperator sb-icons\"> / </div>\r\n                        <div class=\"category-text bread-ctext\"><a href=\"https://ej2.syncfusion.com/react/demos/#/material/sparkline/default.html\"><span>Sparkline</span></a></div>\r\n                        <div class=\"category-seperator sb-icons\"> / </div>\r\n                        <div class=\"crumb-sample\">LiveUpdate</div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"control-content\">\r\n                <div id=\"action-description\">\r\n                        <p>\r\n                            \n                    <p>\n                        This sample depicts the various customization options available in sparklines.\n                    </p>\n                \r\n                        </p>\r\n                    </div>\r\n                    <div class=\"container-fluid\">\r\n                        <div class=\"control-section\">\r\n                            <div id='sample'>\r\n                                <div id='loader'>Loading....</div>\r\n                            </div>\r\n                    \r\n                        </div>\r\n                    </div>\r\n                    <div id=\"description-section\">Description</div>    \r\n                    <div id=\"description\">\r\n                        <p>\r\n                           \n                    <p>\n                        In this example, you can see various customization options available in sparklines. Tooltip is enabled in this example. To see the tooltip in action, hover the mouse over the data points or tap on a data point in touch enabled devices.\n                     </p>\n                \r\n                         </p>     \r\n                    </div>    \r\n                </div>             \r\n            </div>\r\n                \r\n            </div>\r\n        </div>\r\n          \r\n</body>\r\n</html>\r\n","app/index.tsx":"/**\r\n * Liveupdate sample for sparkline\r\n */\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport {\r\n    SparklineComponent, SparklineTheme,\r\n    ISparklineLoadedEventArgs\r\n} from '@syncfusion/ej2-react-charts';\r\nimport { SampleBase } from './sample-base';\r\nconst SAMPLE_CSS = `\r\n    .control-fluid {\r\n\t\tpadding: 0px !important;\r\n    }\r\n    .spark {\r\n        float: left;\r\n        width: 95%;\r\n        margin-left: 3%;\r\n    }\r\n    .index {\r\n        z-index: 1000;\r\n    }`;\r\n    \r\n\r\nexport class LiveUpdate extends SampleBase<{}, {}> {\r\n    private sparkInstance: SparklineComponent;\r\n    private sparkInstance1: SparklineComponent;\r\n    private sparkInstance2: SparklineComponent;\r\n    private sparkInstance3: SparklineComponent;\r\n    private temp1: number;\r\n    private temp3: number;\r\n    private temp2: number;\r\n    private temp4: number;\r\n    private timer1: any;\r\n    private timer2: any;\r\n    private timer3: any;\r\n    private timer4: any;\r\n\r\n\r\n    public load(args: ISparklineLoadedEventArgs): void {\r\n        let theme: string = location.hash.split('/')[1];\r\n        theme = theme ? theme : 'Material';\r\n        args.sparkline.theme = (theme.charAt(0).toUpperCase() + theme.slice(1)) as SparklineTheme;\r\n    }\r\n\r\n    public updateSparkline1(args: ISparklineLoadedEventArgs): void {\r\n        setTimeout(() => {\r\n            if (this.sparkInstance == null)\r\n                this.sparkInstance = args.sparkline as SparklineComponent;\r\n            if (this.temp1 == null)\r\n                this.temp1 = this.sparkInstance.dataSource.length - 1;\r\n            if (this.timer1 != null)\r\n                clearInterval(this.timer1)\r\n            this.timer1 = setInterval(this.update(), 500);\r\n        }, 500);\r\n    }\r\n\r\n    public updateSparkline2(args: ISparklineLoadedEventArgs): void {\r\n        setTimeout(() => {\r\n            if (this.sparkInstance1 == null)\r\n                this.sparkInstance1 = args.sparkline as SparklineComponent;\r\n            if (this.temp3 == null)\r\n                this.temp3 = this.sparkInstance1.dataSource.length - 1;\r\n            if (this.timer2 != null)\r\n                clearInterval(this.timer2)\r\n            this.timer2 = setInterval(this.update2(), 500);\r\n        }, 500);\r\n    }\r\n\r\n    public updateSparkline3(args: ISparklineLoadedEventArgs): void {\r\n        setTimeout(() => {\r\n            if (this.sparkInstance2 == null)\r\n                this.sparkInstance2 = args.sparkline as SparklineComponent;\r\n            if (this.temp2 == null)\r\n                this.temp2 = this.sparkInstance2.dataSource.length - 1;\r\n            if (this.timer3 != null)\r\n                clearInterval(this.timer3)\r\n            this.timer3 = setInterval(this.update1(), 500);\r\n        }, 500);\r\n    }\r\n\r\n    public updateSparkline4(args: ISparklineLoadedEventArgs): void {\r\n        setTimeout(() => {\r\n            if (this.sparkInstance3 == null)\r\n                this.sparkInstance3 = args.sparkline as SparklineComponent;\r\n            if (this.temp4 == null)\r\n                this.temp4 = this.sparkInstance3.dataSource.length - 1;\r\n            if (this.timer4 != null)\r\n                clearInterval(this.timer4)\r\n            this.timer4 = setInterval(this.update4(), 500);\r\n        }, 500);\r\n    }\r\n\r\n    public update(): void {\r\n        if (this.sparkInstance.element.className.indexOf('e-sparkline') > -1) {\r\n            let value: number = ((Math.random() * 100) + 5) % 50;\r\n            this.sparkInstance.dataSource.push({ x: ++this.temp1, yval: value });\r\n            this.sparkInstance.dataSource.shift();\r\n            this.sparkInstance.refresh();\r\n            let cpu: Element = document.getElementById('cpu');\r\n            cpu.innerHTML = ((value / 150) * 100).toFixed(0) + '% ' + ((value * 3) / 100).toFixed(2) + 'GHz';\r\n        }\r\n    }\r\n\r\n    public update2(): void {\r\n        if (this.sparkInstance1.element.className.indexOf('e-sparkline') > -1) {\r\n            let value: number = ((Math.random() * 100) + 5) % 80;\r\n            this.sparkInstance1.dataSource.push({ x: ++this.temp3, yval: value });\r\n            this.sparkInstance1.dataSource.shift();\r\n            this.sparkInstance1.refresh();\r\n            let disk: Element = document.getElementById('disk');\r\n            disk.innerHTML = value.toFixed(0) + '%';\r\n        }\r\n    }\r\n\r\n    public update1(): void {\r\n        if (this.sparkInstance2.element.className.indexOf('e-sparkline') > -1) {\r\n            let value: number = Math.random();\r\n            if (value > 0.6) {\r\n                value = 6 + (value / 10);\r\n            } else {\r\n                value = 6 - (value / 10);\r\n            }\r\n            this.sparkInstance2.dataSource.push({ x: ++this.temp2, yval: value });\r\n            this.sparkInstance2.dataSource.shift();\r\n            this.sparkInstance2.refresh();\r\n            let memory: Element = document.getElementById('memory');\r\n            let gb: string = parseFloat(value.toString().replace('0', '')).toFixed(1);\r\n            memory.innerHTML = gb + '/15.8 GB (' + ((value / 15.8) * 100).toFixed(0) + '%)';\r\n        }\r\n    }\r\n\r\n    public update4(): void {\r\n        if (this.sparkInstance3.element.className.indexOf('e-sparkline') > -1) {\r\n            let value: number = ((Math.random() * 100) + 5) % 80;\r\n            this.sparkInstance3.dataSource.push({ x: ++this.temp3, yval: value });\r\n            this.sparkInstance3.dataSource.shift();\r\n            this.sparkInstance3.refresh();\r\n            let net: Element = document.getElementById('net');\r\n            net.innerHTML = 'R: ' + value.toFixed(0) + 'Kbps';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='control-pane'>\r\n                <style>\r\n                    {SAMPLE_CSS}\r\n                </style>\r\n                <div className='control-section' style={{ \"align\": \"center\" }}>\r\n                    <div id='spark-container' className=\"row\">\r\n                        <div className=\"cols-sample-area\" style={{ \"align\": \"center\", \"margin-top\": \"8%\" }}>\r\n                            <div style={{ \"align\": \"center\" }} className=\"col-lg-3 col-m-3 col-sm-6\">\r\n                                <div style={{ \"align\": \"center\" }} className=\"spark\" id=\"spark-container1\">\r\n                                    <div className=\"index\" style={{ \"color\": \"#000000\", \"font-size\": \"12px\", \"position\": \"absolute\", \"margin-top\": \"10px\", \"margin-left\": \"8%\" }}>\r\n                                        <b>CPU</b>\r\n                                    </div>\r\n                                    <div id=\"cpu\" className=\"index\" style={{ \"color\": \"#0877d6\", \"position\": \"absolute\", \"margin-top\": \"25px\", \"margin-left\": \"8%\" }}>26% 1.2GHz</div>\r\n                                    <SparklineComponent loaded={this.updateSparkline1.bind(this)} load={this.load.bind(this)} ref={m => this.sparkInstance = m} id='spark1-container'\r\n                                        height='130px' width='90%' lineWidth={1} type='Area' valueType='Numeric'\r\n                                        fill='#e8f2fc'\r\n                                        axisSettings={{\r\n                                            minY: 0,\r\n                                            maxY: 150\r\n                                        }}\r\n                                        containerArea={{\r\n                                            background: 'white',\r\n                                            border: {\r\n                                                color: '#dcdfe0',\r\n                                                width: 2\r\n                                            }\r\n                                        }}\r\n                                        border={{\r\n                                            color: '#0358a0',\r\n                                            width: 1\r\n                                        }}\r\n                                        dataSource={[\r\n                                            { x: 0, yval: 50 },\r\n                                            { x: 1, yval: 30 },\r\n                                            { x: 2, yval: 20 },\r\n                                            { x: 3, yval: 30 },\r\n                                            { x: 4, yval: 50 },\r\n                                            { x: 5, yval: 40 },\r\n                                            { x: 6, yval: 20 },\r\n                                            { x: 7, yval: 10 },\r\n                                            { x: 8, yval: 30 },\r\n                                            { x: 9, yval: 10 },\r\n                                            { x: 10, yval: 40 },\r\n                                            { x: 11, yval: 50 },\r\n                                            { x: 12, yval: 10 },\r\n                                            { x: 13, yval: 30 },\r\n                                            { x: 14, yval: 50 },\r\n                                            { x: 15, yval: 20 },\r\n                                            { x: 16, yval: 10 },\r\n                                            { x: 17, yval: 40 },\r\n                                            { x: 18, yval: 30 },\r\n                                            { x: 19, yval: 40 }\r\n                                        ]}\r\n                                        xName='x' yName='yval'>\r\n                                    </SparklineComponent>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ \"align\": \"center\" }} className=\"col-lg-3 col-m-3 col-sm-6\">\r\n                                <div style={{ \"align\": \"center\" }} className=\"spark\" id=\"spark-container2\">\r\n                                    <div className='index' style={{ \"color\": \"#000000\", \"font-size\": \"12px\", \"position\": \"absolute\", \"margin-top\": \"10px\", \"margin-left\": \"8%\" }}>\r\n                                        <b>Disk</b>\r\n                                    </div>\r\n                                    <div id=\"disk\" className=\"index\" style={{ \"color\": \"#b247c6\", \"position\": \"absolute\", \"margin-top\": \"25px\", \"margin-left\": \"8%\" }}>50%</div>\r\n                                    <SparklineComponent loaded={this.updateSparkline2.bind(this)} load={this.load.bind(this)} ref={m => this.sparkInstance2 = m} id='spark2-container'\r\n                                        height='130px' width='90%' lineWidth={1} type='Area' valueType='Numeric'\r\n                                        fill='#f5e8fc'\r\n                                        axisSettings={{\r\n                                            minY: 4,\r\n                                            maxY: 8\r\n                                        }}\r\n                                        containerArea={{\r\n                                            background: 'white',\r\n                                            border: {\r\n                                                color: '#dcdfe0',\r\n                                                width: 2\r\n                                            }\r\n                                        }}\r\n                                        border={{\r\n                                            color: '#b247c6',\r\n                                            width: 1\r\n                                        }}\r\n                                        dataSource={[\r\n                                            { x: 0, yval: 6.05 },\r\n                                            { x: 1, yval: 6.03 },\r\n                                            { x: 2, yval: 6.02 },\r\n                                            { x: 3, yval: 6.07 },\r\n                                            { x: 4, yval: 6.05 },\r\n                                            { x: 5, yval: 6.09 },\r\n                                            { x: 6, yval: 6.08 },\r\n                                            { x: 7, yval: 6.01 },\r\n                                            { x: 8, yval: 6.03 },\r\n                                            { x: 9, yval: 6.01 },\r\n                                            { x: 10, yval: 6.07 },\r\n                                            { x: 11, yval: 6.05 },\r\n                                            { x: 12, yval: 6.01 },\r\n                                            { x: 13, yval: 6.06 },\r\n                                            { x: 14, yval: 6.05 },\r\n                                            { x: 15, yval: 6.03 },\r\n                                            { x: 16, yval: 6.01 },\r\n                                            { x: 17, yval: 6.09 },\r\n                                            { x: 18, yval: 6.06 },\r\n                                            { x: 19, yval: 6.05 }\r\n                                        ]}\r\n                                        xName='x' yName='yval'>\r\n                                    </SparklineComponent>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ \"align\": \"center\" }} className=\"col-lg-3 col-m-3 col-sm-6\">\r\n                                <div style={{ \"align\": \"center\" }} className=\"spark\" id=\"spark-container3\">\r\n                                    <div className=\"index\" style={{ \"color\": \"#000000\", \"font-size\": \"12px\", \"position\": \"absolute\", \"margin-top\": \"10px\", \"margin-left\": \"8%\" }}>\r\n                                        <b>Memory</b>\r\n                                    </div>\r\n                                    <div id=\"memory\" className=\"index\" style={{ \"color\": \"#5bcc8f\", \"position\": \"absolute\", \"margin-top\": \"25px\", \"margin-left\": \"8%\" }}>6.5/15.8 GB (41%)</div>\r\n                                    <SparklineComponent loaded={this.updateSparkline3.bind(this)} load={this.load.bind(this)} ref={m => this.sparkInstance1 = m} id='spark3-container'\r\n                                        height='130px' width='90%' lineWidth={1} type='Area' valueType='Numeric'\r\n                                        fill='#e0f9d1'\r\n                                        axisSettings={{\r\n                                            minY: 0,\r\n                                            maxY: 130\r\n                                        }}\r\n                                        containerArea={{\r\n                                            background: 'white',\r\n                                            border: {\r\n                                                color: '#dcdfe0',\r\n                                                width: 2\r\n                                            }\r\n                                        }}\r\n                                        border={{\r\n                                            color: '#27ad66',\r\n                                            width: 1\r\n                                        }}\r\n                                        dataSource={[\r\n                                            { x: 0, yval: 50 },\r\n                                            { x: 1, yval: 30 },\r\n                                            { x: 2, yval: 20 },\r\n                                            { x: 3, yval: 70 },\r\n                                            { x: 4, yval: 50 },\r\n                                            { x: 5, yval: 20 },\r\n                                            { x: 6, yval: 80 },\r\n                                            { x: 7, yval: 10 },\r\n                                            { x: 8, yval: 30 },\r\n                                            { x: 9, yval: 10 },\r\n                                            { x: 10, yval: 70 },\r\n                                            { x: 11, yval: 50 },\r\n                                            { x: 12, yval: 10 },\r\n                                            { x: 13, yval: 60 },\r\n                                            { x: 14, yval: 50 },\r\n                                            { x: 15, yval: 30 },\r\n                                            { x: 16, yval: 10 },\r\n                                            { x: 17, yval: 20 },\r\n                                            { x: 18, yval: 60 },\r\n                                            { x: 19, yval: 50 }\r\n                                        ]}\r\n                                        xName='x' yName='yval'>\r\n                                    </SparklineComponent>\r\n                                </div>\r\n                            </div>\r\n                            <div style={{ \"align\": \"center\" }} className=\"col-lg-3 col-m-3 col-sm-6\">\r\n                                <div style={{ \"align\": \"center\" }} className=\"spark\" id=\"spark-container4\">\r\n                                    <div className=\"index\" style={{ \"color\": \"#000000\", \"font-size\": \"12px\", \"position\": \"absolute\", \"margin-top\": \"10px\", \"margin-left\": \"8%\" }}>\r\n                                        <b>Ethernet</b>\r\n                                    </div>\r\n                                    <div id=\"net\" className=\"index\" style={{ \"color\": \"#d1a990\", \"position\": \"absolute\", \"margin-top\": \"25px\", \"margin-left\": \"8%\" }}>6.5/15.8 GB (41%)</div>\r\n                                    <SparklineComponent loaded={this.updateSparkline4.bind(this)} load={this.load.bind(this)} ref={m => this.sparkInstance3 = m} id='spark4-container'\r\n                                        height='130px' width='90%' lineWidth={1} type='Area' valueType='Numeric'\r\n                                        fill='#F2D8C7'\r\n                                        axisSettings={{\r\n                                            minY: 0,\r\n                                            maxY: 120\r\n                                        }}\r\n                                        containerArea={{\r\n                                            background: 'white',\r\n                                            border: {\r\n                                                color: '#dcdfe0',\r\n                                                width: 2\r\n                                            }\r\n                                        }}\r\n                                        border={{\r\n                                            color: '#AA907A',\r\n                                            width: 1\r\n                                        }}\r\n                                        dataSource={[\r\n                                            { x: 0, yval: 50 },\r\n                                            { x: 1, yval: 30 },\r\n                                            { x: 2, yval: 20 },\r\n                                            { x: 3, yval: 70 },\r\n                                            { x: 4, yval: 50 },\r\n                                            { x: 5, yval: 20 },\r\n                                            { x: 6, yval: 80 },\r\n                                            { x: 7, yval: 10 },\r\n                                            { x: 8, yval: 30 },\r\n                                            { x: 9, yval: 10 },\r\n                                            { x: 10, yval: 70 },\r\n                                            { x: 11, yval: 50 },\r\n                                            { x: 12, yval: 10 },\r\n                                            { x: 13, yval: 60 },\r\n                                            { x: 14, yval: 50 },\r\n                                            { x: 15, yval: 30 },\r\n                                            { x: 16, yval: 10 },\r\n                                            { x: 17, yval: 20 },\r\n                                            { x: 18, yval: 60 },\r\n                                            { x: 19, yval: 50 }\r\n                                        ]}\r\n                                        xName='x' yName='yval'>\r\n                                    </SparklineComponent>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\nReactDOM.render(<LiveUpdate />, document.getElementById('sample'));","app/sample-base.tsx":"import * as ReactDOM from 'react-dom';\r\nimport * as React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { enableRipple } from '@syncfusion/ej2-base';\r\n\r\nenableRipple((window as any).ripple);\r\nexport class SampleBase<P, S> extends React.PureComponent<RouteComponentProps<any> & P, S>{\r\n    public rendereComplete(): void {\r\n        /**custom render complete function */\r\n    }\r\n    componentDidMount(): void {\r\n        setTimeout(() => {\r\n            this.rendereComplete();\r\n        }\r\n        );\r\n    }\r\n}"}